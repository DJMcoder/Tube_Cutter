
Tube_Cutter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e48  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003fd0  08003fd0  00004fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe0  08003fe0  00006fe4  2**0
                  CONTENTS
  4 .ARM          00000008  08003fe0  08003fe0  00004fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fe8  08003fe8  00006fe4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe8  08003fe8  00004fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fec  08003fec  00004fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001fe4  20000000  08003ff0  00005000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006fe4  2**0
                  CONTENTS
 10 .bss          000002e0  20001fe4  20001fe4  00006fe4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022c4  200022c4  00006fe4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006fe4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ab43  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b4c  00000000  00000000  00011b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  000136a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020dfc  00000000  00000000  00014110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be4f  00000000  00000000  00034f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8afe  00000000  00000000  00040d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109859  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 000007f0  00000000  00000000  0010989c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002eb4  00000000  00000000  0010a08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0010cf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20001fe4 	.word	0x20001fe4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003fb8 	.word	0x08003fb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20001fe8 	.word	0x20001fe8
 80001c4:	08003fb8 	.word	0x08003fb8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b96a 	b.w	8000ce0 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	460c      	mov	r4, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d14e      	bne.n	8000ace <__udivmoddi4+0xaa>
 8000a30:	4694      	mov	ip, r2
 8000a32:	458c      	cmp	ip, r1
 8000a34:	4686      	mov	lr, r0
 8000a36:	fab2 f282 	clz	r2, r2
 8000a3a:	d962      	bls.n	8000b02 <__udivmoddi4+0xde>
 8000a3c:	b14a      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a3e:	f1c2 0320 	rsb	r3, r2, #32
 8000a42:	4091      	lsls	r1, r2
 8000a44:	fa20 f303 	lsr.w	r3, r0, r3
 8000a48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a4c:	4319      	orrs	r1, r3
 8000a4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a56:	fa1f f68c 	uxth.w	r6, ip
 8000a5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a62:	fb07 1114 	mls	r1, r7, r4, r1
 8000a66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a6a:	fb04 f106 	mul.w	r1, r4, r6
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x64>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a7a:	f080 8112 	bcs.w	8000ca2 <__udivmoddi4+0x27e>
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	f240 810f 	bls.w	8000ca2 <__udivmoddi4+0x27e>
 8000a84:	3c02      	subs	r4, #2
 8000a86:	4463      	add	r3, ip
 8000a88:	1a59      	subs	r1, r3, r1
 8000a8a:	fa1f f38e 	uxth.w	r3, lr
 8000a8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a92:	fb07 1110 	mls	r1, r7, r0, r1
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f606 	mul.w	r6, r0, r6
 8000a9e:	429e      	cmp	r6, r3
 8000aa0:	d90a      	bls.n	8000ab8 <__udivmoddi4+0x94>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aaa:	f080 80fc 	bcs.w	8000ca6 <__udivmoddi4+0x282>
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	f240 80f9 	bls.w	8000ca6 <__udivmoddi4+0x282>
 8000ab4:	4463      	add	r3, ip
 8000ab6:	3802      	subs	r0, #2
 8000ab8:	1b9b      	subs	r3, r3, r6
 8000aba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000abe:	2100      	movs	r1, #0
 8000ac0:	b11d      	cbz	r5, 8000aca <__udivmoddi4+0xa6>
 8000ac2:	40d3      	lsrs	r3, r2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	428b      	cmp	r3, r1
 8000ad0:	d905      	bls.n	8000ade <__udivmoddi4+0xba>
 8000ad2:	b10d      	cbz	r5, 8000ad8 <__udivmoddi4+0xb4>
 8000ad4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4608      	mov	r0, r1
 8000adc:	e7f5      	b.n	8000aca <__udivmoddi4+0xa6>
 8000ade:	fab3 f183 	clz	r1, r3
 8000ae2:	2900      	cmp	r1, #0
 8000ae4:	d146      	bne.n	8000b74 <__udivmoddi4+0x150>
 8000ae6:	42a3      	cmp	r3, r4
 8000ae8:	d302      	bcc.n	8000af0 <__udivmoddi4+0xcc>
 8000aea:	4290      	cmp	r0, r2
 8000aec:	f0c0 80f0 	bcc.w	8000cd0 <__udivmoddi4+0x2ac>
 8000af0:	1a86      	subs	r6, r0, r2
 8000af2:	eb64 0303 	sbc.w	r3, r4, r3
 8000af6:	2001      	movs	r0, #1
 8000af8:	2d00      	cmp	r5, #0
 8000afa:	d0e6      	beq.n	8000aca <__udivmoddi4+0xa6>
 8000afc:	e9c5 6300 	strd	r6, r3, [r5]
 8000b00:	e7e3      	b.n	8000aca <__udivmoddi4+0xa6>
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	f040 8090 	bne.w	8000c28 <__udivmoddi4+0x204>
 8000b08:	eba1 040c 	sub.w	r4, r1, ip
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	fa1f f78c 	uxth.w	r7, ip
 8000b14:	2101      	movs	r1, #1
 8000b16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b26:	fb07 f006 	mul.w	r0, r7, r6
 8000b2a:	4298      	cmp	r0, r3
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x11c>
 8000b2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x11a>
 8000b38:	4298      	cmp	r0, r3
 8000b3a:	f200 80cd 	bhi.w	8000cd8 <__udivmoddi4+0x2b4>
 8000b3e:	4626      	mov	r6, r4
 8000b40:	1a1c      	subs	r4, r3, r0
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b52:	fb00 f707 	mul.w	r7, r0, r7
 8000b56:	429f      	cmp	r7, r3
 8000b58:	d908      	bls.n	8000b6c <__udivmoddi4+0x148>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b62:	d202      	bcs.n	8000b6a <__udivmoddi4+0x146>
 8000b64:	429f      	cmp	r7, r3
 8000b66:	f200 80b0 	bhi.w	8000cca <__udivmoddi4+0x2a6>
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	1bdb      	subs	r3, r3, r7
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	e7a5      	b.n	8000ac0 <__udivmoddi4+0x9c>
 8000b74:	f1c1 0620 	rsb	r6, r1, #32
 8000b78:	408b      	lsls	r3, r1
 8000b7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b7e:	431f      	orrs	r7, r3
 8000b80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b84:	fa04 f301 	lsl.w	r3, r4, r1
 8000b88:	ea43 030c 	orr.w	r3, r3, ip
 8000b8c:	40f4      	lsrs	r4, r6
 8000b8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b92:	0c38      	lsrs	r0, r7, #16
 8000b94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b98:	fbb4 fef0 	udiv	lr, r4, r0
 8000b9c:	fa1f fc87 	uxth.w	ip, r7
 8000ba0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ba4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bac:	45a1      	cmp	r9, r4
 8000bae:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb2:	d90a      	bls.n	8000bca <__udivmoddi4+0x1a6>
 8000bb4:	193c      	adds	r4, r7, r4
 8000bb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bba:	f080 8084 	bcs.w	8000cc6 <__udivmoddi4+0x2a2>
 8000bbe:	45a1      	cmp	r9, r4
 8000bc0:	f240 8081 	bls.w	8000cc6 <__udivmoddi4+0x2a2>
 8000bc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bc8:	443c      	add	r4, r7
 8000bca:	eba4 0409 	sub.w	r4, r4, r9
 8000bce:	fa1f f983 	uxth.w	r9, r3
 8000bd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000be2:	45a4      	cmp	ip, r4
 8000be4:	d907      	bls.n	8000bf6 <__udivmoddi4+0x1d2>
 8000be6:	193c      	adds	r4, r7, r4
 8000be8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bec:	d267      	bcs.n	8000cbe <__udivmoddi4+0x29a>
 8000bee:	45a4      	cmp	ip, r4
 8000bf0:	d965      	bls.n	8000cbe <__udivmoddi4+0x29a>
 8000bf2:	3b02      	subs	r3, #2
 8000bf4:	443c      	add	r4, r7
 8000bf6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000bfe:	eba4 040c 	sub.w	r4, r4, ip
 8000c02:	429c      	cmp	r4, r3
 8000c04:	46ce      	mov	lr, r9
 8000c06:	469c      	mov	ip, r3
 8000c08:	d351      	bcc.n	8000cae <__udivmoddi4+0x28a>
 8000c0a:	d04e      	beq.n	8000caa <__udivmoddi4+0x286>
 8000c0c:	b155      	cbz	r5, 8000c24 <__udivmoddi4+0x200>
 8000c0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c12:	eb64 040c 	sbc.w	r4, r4, ip
 8000c16:	fa04 f606 	lsl.w	r6, r4, r6
 8000c1a:	40cb      	lsrs	r3, r1
 8000c1c:	431e      	orrs	r6, r3
 8000c1e:	40cc      	lsrs	r4, r1
 8000c20:	e9c5 6400 	strd	r6, r4, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	e750      	b.n	8000aca <__udivmoddi4+0xa6>
 8000c28:	f1c2 0320 	rsb	r3, r2, #32
 8000c2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c34:	fa24 f303 	lsr.w	r3, r4, r3
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	430c      	orrs	r4, r1
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c44:	fa1f f78c 	uxth.w	r7, ip
 8000c48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c50:	0c23      	lsrs	r3, r4, #16
 8000c52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c56:	fb00 f107 	mul.w	r1, r0, r7
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x24c>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c66:	d22c      	bcs.n	8000cc2 <__udivmoddi4+0x29e>
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	d92a      	bls.n	8000cc2 <__udivmoddi4+0x29e>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c78:	fb08 3311 	mls	r3, r8, r1, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb01 f307 	mul.w	r3, r1, r7
 8000c84:	42a3      	cmp	r3, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x276>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c90:	d213      	bcs.n	8000cba <__udivmoddi4+0x296>
 8000c92:	42a3      	cmp	r3, r4
 8000c94:	d911      	bls.n	8000cba <__udivmoddi4+0x296>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4464      	add	r4, ip
 8000c9a:	1ae4      	subs	r4, r4, r3
 8000c9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ca0:	e739      	b.n	8000b16 <__udivmoddi4+0xf2>
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	e6f0      	b.n	8000a88 <__udivmoddi4+0x64>
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e706      	b.n	8000ab8 <__udivmoddi4+0x94>
 8000caa:	45c8      	cmp	r8, r9
 8000cac:	d2ae      	bcs.n	8000c0c <__udivmoddi4+0x1e8>
 8000cae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cb6:	3801      	subs	r0, #1
 8000cb8:	e7a8      	b.n	8000c0c <__udivmoddi4+0x1e8>
 8000cba:	4631      	mov	r1, r6
 8000cbc:	e7ed      	b.n	8000c9a <__udivmoddi4+0x276>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	e799      	b.n	8000bf6 <__udivmoddi4+0x1d2>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e7d4      	b.n	8000c70 <__udivmoddi4+0x24c>
 8000cc6:	46d6      	mov	lr, sl
 8000cc8:	e77f      	b.n	8000bca <__udivmoddi4+0x1a6>
 8000cca:	4463      	add	r3, ip
 8000ccc:	3802      	subs	r0, #2
 8000cce:	e74d      	b.n	8000b6c <__udivmoddi4+0x148>
 8000cd0:	4606      	mov	r6, r0
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e70f      	b.n	8000af8 <__udivmoddi4+0xd4>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	e730      	b.n	8000b40 <__udivmoddi4+0x11c>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_idiv0>:
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <PCNC_Final_State>:
 */

/**
 * Indicate that the PCNC has finished the cut
 */
void PCNC_Final_State(struct PCNC_Setup *setup) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cf2:	4807      	ldr	r0, [pc, #28]	@ (8000d10 <PCNC_Final_State+0x2c>)
 8000cf4:	f001 fb58 	bl	80023a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cfe:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <PCNC_Final_State+0x2c>)
 8000d00:	f001 fb52 	bl	80023a8 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim7);
 8000d04:	4803      	ldr	r0, [pc, #12]	@ (8000d14 <PCNC_Final_State+0x30>)
 8000d06:	f002 f8bf 	bl	8002e88 <HAL_TIM_Base_Stop_IT>
//	__disable_irq();
	while(1==1) {
		__NOP();
 8000d0a:	bf00      	nop
 8000d0c:	e7fd      	b.n	8000d0a <PCNC_Final_State+0x26>
 8000d0e:	bf00      	nop
 8000d10:	40020c00 	.word	0x40020c00
 8000d14:	20002124 	.word	0x20002124

08000d18 <PCNC_Enable_Servo>:
	}
}

void PCNC_Enable_Servo(struct PCNC_Setup *setup) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(setup->Servo->PWM_TIM, setup->Servo->PWM_TIM_CH);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	68da      	ldr	r2, [r3, #12]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4610      	mov	r0, r2
 8000d30:	f002 f932 	bl	8002f98 <HAL_TIM_PWM_Start>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	0000      	movs	r0, r0
	...

08000d40 <PCNC_Go_To_Origin>:

void PCNC_Go_To_Origin(struct PCNC_Setup *setup) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	setup->accepting_instructions = 0;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	751a      	strb	r2, [r3, #20]
	PCNC_Rotate_To_X(setup, 0);
 8000d4e:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8000d70 <PCNC_Go_To_Origin+0x30>
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f8a3 	bl	8000e9e <PCNC_Rotate_To_X>
	PCNC_Translate_To_Y(setup, 0);
 8000d58:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8000d70 <PCNC_Go_To_Origin+0x30>
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 f984 	bl	800106a <PCNC_Translate_To_Y>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	f3af 8000 	nop.w
	...

08000d78 <PCNC_Startup>:

void PCNC_Startup(struct PCNC_Setup *setup) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(setup->Stepper->Dir_Port, setup->Stepper->Dir_Pin, GPIO_PIN_SET);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	8c1b      	ldrh	r3, [r3, #32]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f001 fb0a 	bl	80023a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(setup->Stepper->Pulse_Port, setup->Stepper->Pulse_Pin, GPIO_PIN_SET);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	69d8      	ldr	r0, [r3, #28]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	8b1b      	ldrh	r3, [r3, #24]
 8000da0:	2201      	movs	r2, #1
 8000da2:	4619      	mov	r1, r3
 8000da4:	f001 fb00 	bl	80023a8 <HAL_GPIO_WritePin>
	PCNC_Enable_Servo(setup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ffb5 	bl	8000d18 <PCNC_Enable_Servo>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <PCNC_Begin_Cut>:

void PCNC_Begin_Cut(struct PCNC_Setup *setup) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

	setup->accepting_instructions = 1;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	751a      	strb	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(&htim7);
 8000dc6:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <PCNC_Begin_Cut+0x24>)
 8000dc8:	f001 ffee 	bl	8002da8 <HAL_TIM_Base_Start_IT>
	PCNC_Execute_Next_Instruction(setup);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 f807 	bl	8000de0 <PCNC_Execute_Next_Instruction>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20002124 	.word	0x20002124

08000de0 <PCNC_Execute_Next_Instruction>:

/**
 * Executes the next instruction in the cut code
 */
void PCNC_Execute_Next_Instruction(struct PCNC_Setup *setup) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	if (setup->accepting_instructions <= 0) {
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	7d1b      	ldrb	r3, [r3, #20]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d03a      	beq.n	8000e66 <PCNC_Execute_Next_Instruction+0x86>
		return;
	}

	// do not execute until both are done executing
	if (setup->Servo->Lock > 0 || setup->Stepper->Lock > 0) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d135      	bne.n	8000e6a <PCNC_Execute_Next_Instruction+0x8a>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	7c1b      	ldrb	r3, [r3, #16]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d12f      	bne.n	8000e6a <PCNC_Execute_Next_Instruction+0x8a>
		return;
	}

	if (setup->cur_instruction >= setup->instructions_length) {
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d303      	bcc.n	8000e1e <PCNC_Execute_Next_Instruction+0x3e>
			PCNC_Final_State(setup);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ff64 	bl	8000ce4 <PCNC_Final_State>
			return;
 8000e1c:	e026      	b.n	8000e6c <PCNC_Execute_Next_Instruction+0x8c>
		}

	double x = setup->instructions[setup->cur_instruction][0];
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	4413      	add	r3, r2
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double y = setup->instructions[setup->cur_instruction][1];
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	4413      	add	r3, r2
 8000e3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e42:	e9c7 2302 	strd	r2, r3, [r7, #8]

	PCNC_Rotate_To_X(setup, x);
 8000e46:	ed97 0b04 	vldr	d0, [r7, #16]
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f827 	bl	8000e9e <PCNC_Rotate_To_X>
	PCNC_Translate_To_Y(setup, y);
 8000e50:	ed97 0b02 	vldr	d0, [r7, #8]
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f908 	bl	800106a <PCNC_Translate_To_Y>

	setup->cur_instruction++;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	e002      	b.n	8000e6c <PCNC_Execute_Next_Instruction+0x8c>
		return;
 8000e66:	bf00      	nop
 8000e68:	e000      	b.n	8000e6c <PCNC_Execute_Next_Instruction+0x8c>
		return;
 8000e6a:	bf00      	nop
}
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <PCNC_Servo_Unlock>:


void PCNC_Servo_Unlock(struct PCNC_Setup *setup) {
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(setup->Servo->Lock_TIM);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	69db      	ldr	r3, [r3, #28]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 f801 	bl	8002e88 <HAL_TIM_Base_Stop_IT>
	setup->Servo->Lock = 0;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	PCNC_Execute_Next_Instruction(setup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ffa5 	bl	8000de0 <PCNC_Execute_Next_Instruction>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <PCNC_Rotate_To_X>:
 *
 * @param setup the PCNC Servo configuration parameters
 *
 * @param x the position in inches (on the circumference) to rotate to
 */
void PCNC_Rotate_To_X(struct PCNC_Setup *setup, double x){
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b08c      	sub	sp, #48	@ 0x30
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	ed87 0b00 	vstr	d0, [r7]
	// TODO: add input validation
	// lock servo to prevent two commands from running at the same time
	setup->Servo->Lock = 1;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	uint32_t old_CCR = *(setup->Servo->CCR);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28

	// set the servo PWM to the fraction x is of the total circumference,
	// multiplied by the max PWM
	double x_fraction = x / setup->Servo->circumference;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000eca:	f7ff fc63 	bl	8000794 <__aeabi_ddiv>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double ccr_range = (double)(setup->Servo->CCR_MAX - setup->Servo->CCR_MIN);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	695a      	ldr	r2, [r3, #20]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fab1 	bl	800044c <__aeabi_ui2d>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t new_ccr = (uint32_t)(ccr_range * x_fraction) + setup->Servo->CCR_MIN;
 8000ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ef6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000efa:	f7ff fb21 	bl	8000540 <__aeabi_dmul>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	f7ff fd55 	bl	80009b4 <__aeabi_d2uiz>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4413      	add	r3, r2
 8000f14:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (new_ccr < setup->Servo->CCR_MIN) {
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d204      	bcs.n	8000f2c <PCNC_Rotate_To_X+0x8e>
		new_ccr = setup->Servo->CCR_MIN;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f2a:	e009      	b.n	8000f40 <PCNC_Rotate_To_X+0xa2>
	}
	else if (new_ccr > setup->Servo->CCR_MAX) {
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d903      	bls.n	8000f40 <PCNC_Rotate_To_X+0xa2>
		new_ccr = setup->Servo->CCR_MAX;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	 *(setup->Servo->CCR) = new_ccr;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f48:	601a      	str	r2, [r3, #0]

	 uint32_t ccr_diff = abs((int32_t)old_CCR - (int32_t)new_ccr);
 8000f4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	bfb8      	it	lt
 8000f54:	425b      	neglt	r3, r3
 8000f56:	617b      	str	r3, [r7, #20]

	// set servo lock timer
	uint32_t lock_time = setup->Servo->Lock_Multiplier * ccr_diff;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6a1a      	ldr	r2, [r3, #32]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	613b      	str	r3, [r7, #16]
	setup->Servo->Lock_TIM->Instance->ARR = setup->Servo->Lock_Buffer + lock_time;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	440a      	add	r2, r1
 8000f78:	62da      	str	r2, [r3, #44]	@ 0x2c

	// reset timer
	__HAL_TIM_SET_COUNTER(setup->Servo->Lock_TIM, 0);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start_IT(setup->Servo->Lock_TIM);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 ff0b 	bl	8002da8 <HAL_TIM_Base_Start_IT>
}
 8000f92:	bf00      	nop
 8000f94:	3730      	adds	r7, #48	@ 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <PCNC_Stepper_ISR>:
 * Commits stepper action on repeating timer. Only should commit
 * at most one action at a time.
 *
 * @param setup the configuration of the stepper motor
 */
void PCNC_Stepper_ISR(struct PCNC_Setup *setup) {
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	int32_t step_diff = setup->Stepper->target_steps - setup->Stepper->current_steps;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	60fb      	str	r3, [r7, #12]

	// if we are at the target, don't move
	if (step_diff == 0) {
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10d      	bne.n	8000fd4 <PCNC_Stepper_ISR+0x3a>
		HAL_TIM_Base_Stop_IT(setup->Stepper->htim);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 ff62 	bl	8002e88 <HAL_TIM_Base_Stop_IT>
		setup->Stepper->Lock = 0;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	741a      	strb	r2, [r3, #16]

		// start next instruction
		PCNC_Execute_Next_Instruction(setup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff07 	bl	8000de0 <PCNC_Execute_Next_Instruction>
		return;
 8000fd2:	e047      	b.n	8001064 <PCNC_Stepper_ISR+0xca>
	}

	GPIO_PinState cur_dir = HAL_GPIO_ReadPin(setup->Stepper->Dir_Port, setup->Stepper->Dir_Pin);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	8c1b      	ldrh	r3, [r3, #32]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	f001 f9c8 	bl	8002378 <HAL_GPIO_ReadPin>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	72fb      	strb	r3, [r7, #11]

	// if not going the right direction, switch direction
	// wait a delay period before pulsing
	if ((step_diff > 0 && cur_dir == GPIO_PIN_RESET) ||
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	dd02      	ble.n	8000ff8 <PCNC_Stepper_ISR+0x5e>
 8000ff2:	7afb      	ldrb	r3, [r7, #11]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <PCNC_Stepper_ISR+0x6a>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da0d      	bge.n	800101a <PCNC_Stepper_ISR+0x80>
		(step_diff < 0 && cur_dir == GPIO_PIN_SET)) {
 8000ffe:	7afb      	ldrb	r3, [r7, #11]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d10a      	bne.n	800101a <PCNC_Stepper_ISR+0x80>
		HAL_GPIO_TogglePin(setup->Stepper->Dir_Port, setup->Stepper->Dir_Pin);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	8c1b      	ldrh	r3, [r3, #32]
 8001010:	4619      	mov	r1, r3
 8001012:	4610      	mov	r0, r2
 8001014:	f001 f9e1 	bl	80023da <HAL_GPIO_TogglePin>
		return;
 8001018:	e024      	b.n	8001064 <PCNC_Stepper_ISR+0xca>
	}

	// if we are moving the correct direction
	// toggle the pulse pin
	HAL_GPIO_TogglePin(setup->Stepper->Pulse_Port, setup->Stepper->Pulse_Pin);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	69da      	ldr	r2, [r3, #28]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	8b1b      	ldrh	r3, [r3, #24]
 8001026:	4619      	mov	r1, r3
 8001028:	4610      	mov	r0, r2
 800102a:	f001 f9d6 	bl	80023da <HAL_GPIO_TogglePin>

	// if we finished the pulse, record the step
	if (HAL_GPIO_ReadPin(setup->Stepper->Pulse_Port, setup->Stepper->Pulse_Pin) == GPIO_PIN_SET) {
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	69da      	ldr	r2, [r3, #28]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	8b1b      	ldrh	r3, [r3, #24]
 800103a:	4619      	mov	r1, r3
 800103c:	4610      	mov	r0, r2
 800103e:	f001 f99b 	bl	8002378 <HAL_GPIO_ReadPin>
 8001042:	4603      	mov	r3, r0
 8001044:	2b01      	cmp	r3, #1
 8001046:	d10d      	bne.n	8001064 <PCNC_Stepper_ISR+0xca>
		if (cur_dir == GPIO_PIN_SET) {
 8001048:	7afb      	ldrb	r3, [r7, #11]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d105      	bne.n	800105a <PCNC_Stepper_ISR+0xc0>
			setup->Stepper->current_steps++;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	3201      	adds	r2, #1
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	e004      	b.n	8001064 <PCNC_Stepper_ISR+0xca>
		}
		else {
			setup->Stepper->current_steps--;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	3a01      	subs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <PCNC_Translate_To_Y>:
 *
 * @param setup the PCNC Stepper configuration parameters
 *
 * @param y the absolute position to translate to
 */
void PCNC_Translate_To_Y(struct PCNC_Setup *setup, double y) {
 800106a:	b590      	push	{r4, r7, lr}
 800106c:	b087      	sub	sp, #28
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	ed87 0b00 	vstr	d0, [r7]
	// TODO: add input validation
	setup->Stepper->Lock = 1;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	741a      	strb	r2, [r3, #16]
	double new_target = y/setup->Stepper->steps_to_inches;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001086:	e9d7 0100 	ldrd	r0, r1, [r7]
 800108a:	f7ff fb83 	bl	8000794 <__aeabi_ddiv>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	e9c7 2304 	strd	r2, r3, [r7, #16]
	setup->Stepper->target_steps = (int32_t)(new_target);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	685c      	ldr	r4, [r3, #4]
 800109a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800109e:	f7ff fc61 	bl	8000964 <__aeabi_d2iz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	6063      	str	r3, [r4, #4]
	HAL_TIM_Base_Start_IT(setup->Stepper->htim);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fe7b 	bl	8002da8 <HAL_TIM_Base_Start_IT>
}
 80010b2:	bf00      	nop
 80010b4:	371c      	adds	r7, #28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}
	...

080010bc <PCNC_Get_Setup>:


/**
 * Creates a setup object from constants
 */
struct PCNC_Setup* PCNC_Get_Setup() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
	struct PCNC_Setup *setup = malloc(sizeof(struct PCNC_Setup));
 80010c2:	2018      	movs	r0, #24
 80010c4:	f002 fe7e 	bl	8003dc4 <malloc>
 80010c8:	4603      	mov	r3, r0
 80010ca:	60fb      	str	r3, [r7, #12]
	struct PCNC_Servo_Setup *servo_setup = malloc(sizeof(struct PCNC_Servo_Setup));
 80010cc:	2030      	movs	r0, #48	@ 0x30
 80010ce:	f002 fe79 	bl	8003dc4 <malloc>
 80010d2:	4603      	mov	r3, r0
 80010d4:	60bb      	str	r3, [r7, #8]
	struct PCNC_Stepper_Setup *stepper_setup = malloc(sizeof(struct PCNC_Stepper_Setup));
 80010d6:	2028      	movs	r0, #40	@ 0x28
 80010d8:	f002 fe74 	bl	8003dc4 <malloc>
 80010dc:	4603      	mov	r3, r0
 80010de:	607b      	str	r3, [r7, #4]

	// system setup
	setup->Servo 		 			= servo_setup;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	601a      	str	r2, [r3, #0]
	setup->Stepper 					= stepper_setup;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	605a      	str	r2, [r3, #4]
	setup->cur_instruction 			= 0;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
	setup->instructions_length 		= num_instructions;
 80010f2:	4b37      	ldr	r3, [pc, #220]	@ (80011d0 <PCNC_Get_Setup+0x114>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	60da      	str	r2, [r3, #12]
	setup->instructions 			= cut_instructions;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4a35      	ldr	r2, [pc, #212]	@ (80011d4 <PCNC_Get_Setup+0x118>)
 80010fe:	609a      	str	r2, [r3, #8]
	setup->accepting_instructions	= 0;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2200      	movs	r2, #0
 8001104:	751a      	strb	r2, [r3, #20]

	// servo setup
	setup->Servo->CCR 				= CCR;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a33      	ldr	r2, [pc, #204]	@ (80011d8 <PCNC_Get_Setup+0x11c>)
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	609a      	str	r2, [r3, #8]
	setup->Servo->PWM_TIM    		= PWM_TIM;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a31      	ldr	r2, [pc, #196]	@ (80011dc <PCNC_Get_Setup+0x120>)
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	60da      	str	r2, [r3, #12]
	setup->Servo->PWM_TIM_CH 		= PWM_TIM_CH;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a30      	ldr	r2, [pc, #192]	@ (80011e0 <PCNC_Get_Setup+0x124>)
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	611a      	str	r2, [r3, #16]
	setup->Servo->CCR_MAX 			= CCR_MAX;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a2e      	ldr	r2, [pc, #184]	@ (80011e4 <PCNC_Get_Setup+0x128>)
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	615a      	str	r2, [r3, #20]
	setup->Servo->CCR_MIN 			= CCR_MIN;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a2d      	ldr	r2, [pc, #180]	@ (80011e8 <PCNC_Get_Setup+0x12c>)
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	619a      	str	r2, [r3, #24]
	setup->Servo->Lock				= 0;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	setup->Servo->Lock_Buffer   	= Lock_Buffer;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a29      	ldr	r2, [pc, #164]	@ (80011ec <PCNC_Get_Setup+0x130>)
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24
	setup->Servo->Lock_Multiplier 	= Lock_Multiplier;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a27      	ldr	r2, [pc, #156]	@ (80011f0 <PCNC_Get_Setup+0x134>)
 8001152:	6812      	ldr	r2, [r2, #0]
 8001154:	621a      	str	r2, [r3, #32]
	setup->Servo->circumference 	= circumference;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6819      	ldr	r1, [r3, #0]
 800115a:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <PCNC_Get_Setup+0x138>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	e9c1 2300 	strd	r2, r3, [r1]
	setup->Servo->Lock_TIM			= Lock_TIM;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a23      	ldr	r2, [pc, #140]	@ (80011f8 <PCNC_Get_Setup+0x13c>)
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	61da      	str	r2, [r3, #28]

	// stepper setup
	setup->Stepper->Pulse_Pin			= Pulse_Pin;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a22      	ldr	r2, [pc, #136]	@ (80011fc <PCNC_Get_Setup+0x140>)
 8001174:	8812      	ldrh	r2, [r2, #0]
 8001176:	831a      	strh	r2, [r3, #24]
	setup->Stepper->Pulse_Port		= Pulse_Port;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	4a20      	ldr	r2, [pc, #128]	@ (8001200 <PCNC_Get_Setup+0x144>)
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	61da      	str	r2, [r3, #28]
	setup->Stepper->Lock			= 0;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	741a      	strb	r2, [r3, #16]
	setup->Stepper->Dir_Pin		= Dir_Pin;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4a1d      	ldr	r2, [pc, #116]	@ (8001204 <PCNC_Get_Setup+0x148>)
 8001190:	8812      	ldrh	r2, [r2, #0]
 8001192:	841a      	strh	r2, [r3, #32]
	setup->Stepper->Dir_Port  	= Dir_Port;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a1b      	ldr	r2, [pc, #108]	@ (8001208 <PCNC_Get_Setup+0x14c>)
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	625a      	str	r2, [r3, #36]	@ 0x24
	setup->Stepper->current_steps 	= 0;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
	setup->Stepper->target_steps 	= 0;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
	setup->Stepper->htim			= step_htim;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	4a16      	ldr	r2, [pc, #88]	@ (800120c <PCNC_Get_Setup+0x150>)
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	615a      	str	r2, [r3, #20]
	setup->Stepper->steps_to_inches = steps_to_inches;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6859      	ldr	r1, [r3, #4]
 80011bc:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <PCNC_Get_Setup+0x154>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	e9c1 2302 	strd	r2, r3, [r1, #8]

	return setup;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000044 	.word	0x20000044
 80011d4:	20000048 	.word	0x20000048
 80011d8:	20000010 	.word	0x20000010
 80011dc:	20000014 	.word	0x20000014
 80011e0:	20002000 	.word	0x20002000
 80011e4:	2000000c 	.word	0x2000000c
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000020 	.word	0x20000020
 80011f0:	2000001c 	.word	0x2000001c
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000018 	.word	0x20000018
 80011fc:	20000030 	.word	0x20000030
 8001200:	20000034 	.word	0x20000034
 8001204:	20000038 	.word	0x20000038
 8001208:	2000003c 	.word	0x2000003c
 800120c:	20000040 	.word	0x20000040
 8001210:	20000028 	.word	0x20000028

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001218:	f000 fd8e 	bl	8001d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121c:	f000 f82e 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001220:	f000 fa2c 	bl	800167c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001224:	f000 f894 	bl	8001350 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001228:	f000 f9a4 	bl	8001574 <MX_TIM5_Init>
  MX_TIM4_Init();
 800122c:	f000 f954 	bl	80014d8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001230:	f000 f904 	bl	800143c <MX_TIM3_Init>
  MX_TIM7_Init();
 8001234:	f000 f9ec 	bl	8001610 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800123e:	480d      	ldr	r0, [pc, #52]	@ (8001274 <main+0x60>)
 8001240:	f001 f8b2 	bl	80023a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800124a:	480a      	ldr	r0, [pc, #40]	@ (8001274 <main+0x60>)
 800124c:	f001 f8ac 	bl	80023a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001256:	4807      	ldr	r0, [pc, #28]	@ (8001274 <main+0x60>)
 8001258:	f001 f8a6 	bl	80023a8 <HAL_GPIO_WritePin>
  cutter = PCNC_Get_Setup();
 800125c:	f7ff ff2e 	bl	80010bc <PCNC_Get_Setup>
 8001260:	4603      	mov	r3, r0
 8001262:	4a05      	ldr	r2, [pc, #20]	@ (8001278 <main+0x64>)
 8001264:	6013      	str	r3, [r2, #0]
  PCNC_Startup(cutter);
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <main+0x64>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fd84 	bl	8000d78 <PCNC_Startup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    __NOP();
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <main+0x5c>
 8001274:	40020c00 	.word	0x40020c00
 8001278:	2000216c 	.word	0x2000216c

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	@ 0x50
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2230      	movs	r2, #48	@ 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f002 fe50 	bl	8003f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <SystemClock_Config+0xcc>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a8:	4a27      	ldr	r2, [pc, #156]	@ (8001348 <SystemClock_Config+0xcc>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b0:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <SystemClock_Config+0xcc>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4b22      	ldr	r3, [pc, #136]	@ (800134c <SystemClock_Config+0xd0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a21      	ldr	r2, [pc, #132]	@ (800134c <SystemClock_Config+0xd0>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <SystemClock_Config+0xd0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e2:	2302      	movs	r3, #2
 80012e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012ec:	2304      	movs	r3, #4
 80012ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80012f0:	2390      	movs	r3, #144	@ 0x90
 80012f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80012f8:	2306      	movs	r3, #6
 80012fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	4618      	mov	r0, r3
 8001302:	f001 f89d 	bl	8002440 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800130c:	f000 fb3e 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800131c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001320:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001322:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001326:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2104      	movs	r1, #4
 800132e:	4618      	mov	r0, r3
 8001330:	f001 fafe 	bl	8002930 <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800133a:	f000 fb27 	bl	800198c <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3750      	adds	r7, #80	@ 0x50
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	@ 0x38
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	615a      	str	r2, [r3, #20]
 800137e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001380:	4b2d      	ldr	r3, [pc, #180]	@ (8001438 <MX_TIM2_Init+0xe8>)
 8001382:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001386:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001388:	4b2b      	ldr	r3, [pc, #172]	@ (8001438 <MX_TIM2_Init+0xe8>)
 800138a:	221f      	movs	r2, #31
 800138c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b2a      	ldr	r3, [pc, #168]	@ (8001438 <MX_TIM2_Init+0xe8>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 45000-1;
 8001394:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <MX_TIM2_Init+0xe8>)
 8001396:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 800139a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <MX_TIM2_Init+0xe8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b25      	ldr	r3, [pc, #148]	@ (8001438 <MX_TIM2_Init+0xe8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013a8:	4823      	ldr	r0, [pc, #140]	@ (8001438 <MX_TIM2_Init+0xe8>)
 80013aa:	f001 fcad 	bl	8002d08 <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013b4:	f000 faea 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013c2:	4619      	mov	r1, r3
 80013c4:	481c      	ldr	r0, [pc, #112]	@ (8001438 <MX_TIM2_Init+0xe8>)
 80013c6:	f002 f861 	bl	800348c <HAL_TIM_ConfigClockSource>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013d0:	f000 fadc 	bl	800198c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013d4:	4818      	ldr	r0, [pc, #96]	@ (8001438 <MX_TIM2_Init+0xe8>)
 80013d6:	f001 fd86 	bl	8002ee6 <HAL_TIM_PWM_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013e0:	f000 fad4 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ec:	f107 0320 	add.w	r3, r7, #32
 80013f0:	4619      	mov	r1, r3
 80013f2:	4811      	ldr	r0, [pc, #68]	@ (8001438 <MX_TIM2_Init+0xe8>)
 80013f4:	f002 fc56 	bl	8003ca4 <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013fe:	f000 fac5 	bl	800198c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001402:	2360      	movs	r3, #96	@ 0x60
 8001404:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	4807      	ldr	r0, [pc, #28]	@ (8001438 <MX_TIM2_Init+0xe8>)
 800141a:	f001 ff75 	bl	8003308 <HAL_TIM_PWM_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001424:	f000 fab2 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001428:	4803      	ldr	r0, [pc, #12]	@ (8001438 <MX_TIM2_Init+0xe8>)
 800142a:	f000 fb73 	bl	8001b14 <HAL_TIM_MspPostInit>

}
 800142e:	bf00      	nop
 8001430:	3738      	adds	r7, #56	@ 0x38
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20002004 	.word	0x20002004

0800143c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	463b      	mov	r3, r7
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001458:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <MX_TIM3_Init+0x94>)
 800145a:	4a1e      	ldr	r2, [pc, #120]	@ (80014d4 <MX_TIM3_Init+0x98>)
 800145c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 800145e:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <MX_TIM3_Init+0x94>)
 8001460:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001464:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <MX_TIM3_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800146c:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <MX_TIM3_Init+0x94>)
 800146e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001472:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001474:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <MX_TIM3_Init+0x94>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <MX_TIM3_Init+0x94>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001480:	4813      	ldr	r0, [pc, #76]	@ (80014d0 <MX_TIM3_Init+0x94>)
 8001482:	f001 fc41 	bl	8002d08 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800148c:	f000 fa7e 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	4619      	mov	r1, r3
 800149c:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <MX_TIM3_Init+0x94>)
 800149e:	f001 fff5 	bl	800348c <HAL_TIM_ConfigClockSource>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014a8:	f000 fa70 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ac:	2300      	movs	r3, #0
 80014ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014b4:	463b      	mov	r3, r7
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <MX_TIM3_Init+0x94>)
 80014ba:	f002 fbf3 	bl	8003ca4 <HAL_TIMEx_MasterConfigSynchronization>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014c4:	f000 fa62 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000204c 	.word	0x2000204c
 80014d4:	40000400 	.word	0x40000400

080014d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	463b      	mov	r3, r7
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <MX_TIM4_Init+0x94>)
 80014f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001570 <MX_TIM4_Init+0x98>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 360-1;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <MX_TIM4_Init+0x94>)
 80014fc:	f240 1267 	movw	r2, #359	@ 0x167
 8001500:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <MX_TIM4_Init+0x94>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 8001508:	4b18      	ldr	r3, [pc, #96]	@ (800156c <MX_TIM4_Init+0x94>)
 800150a:	2214      	movs	r2, #20
 800150c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b17      	ldr	r3, [pc, #92]	@ (800156c <MX_TIM4_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b15      	ldr	r3, [pc, #84]	@ (800156c <MX_TIM4_Init+0x94>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800151a:	4814      	ldr	r0, [pc, #80]	@ (800156c <MX_TIM4_Init+0x94>)
 800151c:	f001 fbf4 	bl	8002d08 <HAL_TIM_Base_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001526:	f000 fa31 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800152e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4619      	mov	r1, r3
 8001536:	480d      	ldr	r0, [pc, #52]	@ (800156c <MX_TIM4_Init+0x94>)
 8001538:	f001 ffa8 	bl	800348c <HAL_TIM_ConfigClockSource>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001542:	f000 fa23 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800154e:	463b      	mov	r3, r7
 8001550:	4619      	mov	r1, r3
 8001552:	4806      	ldr	r0, [pc, #24]	@ (800156c <MX_TIM4_Init+0x94>)
 8001554:	f002 fba6 	bl	8003ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800155e:	f000 fa15 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20002094 	.word	0x20002094
 8001570:	40000800 	.word	0x40000800

08001574 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001590:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <MX_TIM5_Init+0x94>)
 8001592:	4a1e      	ldr	r2, [pc, #120]	@ (800160c <MX_TIM5_Init+0x98>)
 8001594:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15360-1;
 8001596:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <MX_TIM5_Init+0x94>)
 8001598:	f643 32ff 	movw	r2, #15359	@ 0x3bff
 800159c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <MX_TIM5_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4500-1;
 80015a4:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <MX_TIM5_Init+0x94>)
 80015a6:	f241 1293 	movw	r2, #4499	@ 0x1193
 80015aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ac:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <MX_TIM5_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <MX_TIM5_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015b8:	4813      	ldr	r0, [pc, #76]	@ (8001608 <MX_TIM5_Init+0x94>)
 80015ba:	f001 fba5 	bl	8002d08 <HAL_TIM_Base_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80015c4:	f000 f9e2 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015ce:	f107 0308 	add.w	r3, r7, #8
 80015d2:	4619      	mov	r1, r3
 80015d4:	480c      	ldr	r0, [pc, #48]	@ (8001608 <MX_TIM5_Init+0x94>)
 80015d6:	f001 ff59 	bl	800348c <HAL_TIM_ConfigClockSource>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80015e0:	f000 f9d4 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	@ (8001608 <MX_TIM5_Init+0x94>)
 80015f2:	f002 fb57 	bl	8003ca4 <HAL_TIMEx_MasterConfigSynchronization>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80015fc:	f000 f9c6 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200020dc 	.word	0x200020dc
 800160c:	40000c00 	.word	0x40000c00

08001610 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001616:	463b      	mov	r3, r7
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <MX_TIM7_Init+0x64>)
 8001620:	4a15      	ldr	r2, [pc, #84]	@ (8001678 <MX_TIM7_Init+0x68>)
 8001622:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200;
 8001624:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <MX_TIM7_Init+0x64>)
 8001626:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 800162a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MX_TIM7_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <MX_TIM7_Init+0x64>)
 8001634:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001638:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <MX_TIM7_Init+0x64>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001640:	480c      	ldr	r0, [pc, #48]	@ (8001674 <MX_TIM7_Init+0x64>)
 8001642:	f001 fb61 	bl	8002d08 <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800164c:	f000 f99e 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001658:	463b      	mov	r3, r7
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	@ (8001674 <MX_TIM7_Init+0x64>)
 800165e:	f002 fb21 	bl	8003ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001668:	f000 f990 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20002124 	.word	0x20002124
 8001678:	40001400 	.word	0x40001400

0800167c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08c      	sub	sp, #48	@ 0x30
 8001680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	4b6a      	ldr	r3, [pc, #424]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a69      	ldr	r2, [pc, #420]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b67      	ldr	r3, [pc, #412]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	4b63      	ldr	r3, [pc, #396]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a62      	ldr	r2, [pc, #392]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b60      	ldr	r3, [pc, #384]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 80016d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b59      	ldr	r3, [pc, #356]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b55      	ldr	r3, [pc, #340]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a54      	ldr	r2, [pc, #336]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b52      	ldr	r3, [pc, #328]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	4b4e      	ldr	r3, [pc, #312]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a4d      	ldr	r2, [pc, #308]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b4b      	ldr	r3, [pc, #300]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b47      	ldr	r3, [pc, #284]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a46      	ldr	r2, [pc, #280]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b44      	ldr	r3, [pc, #272]	@ (8001840 <MX_GPIO_Init+0x1c4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|STEP_PULSE_Pin|STEP_DIR_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2158      	movs	r1, #88	@ 0x58
 800173e:	4841      	ldr	r0, [pc, #260]	@ (8001844 <MX_GPIO_Init+0x1c8>)
 8001740:	f000 fe32 	bl	80023a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SERVO_PWM_GPIO_Port, SERVO_PWM_Pin, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800174a:	483f      	ldr	r0, [pc, #252]	@ (8001848 <MX_GPIO_Init+0x1cc>)
 800174c:	f000 fe2c 	bl	80023a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001750:	2200      	movs	r2, #0
 8001752:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001756:	483d      	ldr	r0, [pc, #244]	@ (800184c <MX_GPIO_Init+0x1d0>)
 8001758:	f000 fe26 	bl	80023a8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin STEP_PULSE_Pin STEP_DIR_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|STEP_PULSE_Pin|STEP_DIR_Pin;
 800175c:	2358      	movs	r3, #88	@ 0x58
 800175e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4834      	ldr	r0, [pc, #208]	@ (8001844 <MX_GPIO_Init+0x1c8>)
 8001774:	f000 fc64 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : SERVO_PWM_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8001778:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	482d      	ldr	r0, [pc, #180]	@ (8001848 <MX_GPIO_Init+0x1cc>)
 8001792:	f000 fc55 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001796:	2301      	movs	r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800179a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800179e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	4829      	ldr	r0, [pc, #164]	@ (8001850 <MX_GPIO_Init+0x1d4>)
 80017ac:	f000 fc48 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80017b0:	2304      	movs	r3, #4
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4619      	mov	r1, r3
 80017c2:	4824      	ldr	r0, [pc, #144]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 80017c4:	f000 fc3c 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80017c8:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80017cc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	4619      	mov	r1, r3
 80017e0:	481a      	ldr	r0, [pc, #104]	@ (800184c <MX_GPIO_Init+0x1d0>)
 80017e2:	f000 fc2d 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER_DOWN_Pin STEPPER_UP_Pin */
  GPIO_InitStruct.Pin = STEPPER_DOWN_Pin|STEPPER_UP_Pin;
 80017e6:	23c0      	movs	r3, #192	@ 0xc0
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	4813      	ldr	r0, [pc, #76]	@ (8001848 <MX_GPIO_Init+0x1cc>)
 80017fc:	f000 fc20 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001800:	2320      	movs	r3, #32
 8001802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	480e      	ldr	r0, [pc, #56]	@ (800184c <MX_GPIO_Init+0x1d0>)
 8001814:	f000 fc14 	bl	8002040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	2006      	movs	r0, #6
 800181e:	f000 fbd8 	bl	8001fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001822:	2006      	movs	r0, #6
 8001824:	f000 fbf1 	bl	800200a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	2017      	movs	r0, #23
 800182e:	f000 fbd0 	bl	8001fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001832:	2017      	movs	r0, #23
 8001834:	f000 fbe9 	bl	800200a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001838:	bf00      	nop
 800183a:	3730      	adds	r7, #48	@ 0x30
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	40021000 	.word	0x40021000
 8001848:	40020800 	.word	0x40020800
 800184c:	40020c00 	.word	0x40020c00
 8001850:	40020000 	.word	0x40020000
 8001854:	40020400 	.word	0x40020400

08001858 <Button_Debounced>:

/* USER CODE BEGIN 4 */
void Button_Debounced() {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	static uint8_t button_state = 0;

	switch (button_state) {
 800185c:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <Button_Debounced+0x64>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <Button_Debounced+0x12>
 8001864:	2b01      	cmp	r3, #1
 8001866:	d012      	beq.n	800188e <Button_Debounced+0x36>
 8001868:	e01d      	b.n	80018a6 <Button_Debounced+0x4e>
		case 0:
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001870:	4813      	ldr	r0, [pc, #76]	@ (80018c0 <Button_Debounced+0x68>)
 8001872:	f000 fd99 	bl	80023a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001876:	2201      	movs	r2, #1
 8001878:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800187c:	4810      	ldr	r0, [pc, #64]	@ (80018c0 <Button_Debounced+0x68>)
 800187e:	f000 fd93 	bl	80023a8 <HAL_GPIO_WritePin>
			PCNC_Go_To_Origin(cutter);
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <Button_Debounced+0x6c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fa5a 	bl	8000d40 <PCNC_Go_To_Origin>
			break;
 800188c:	e00d      	b.n	80018aa <Button_Debounced+0x52>
		case 1:
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001894:	480a      	ldr	r0, [pc, #40]	@ (80018c0 <Button_Debounced+0x68>)
 8001896:	f000 fd87 	bl	80023a8 <HAL_GPIO_WritePin>
			PCNC_Begin_Cut(cutter);
 800189a:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <Button_Debounced+0x6c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fa8a 	bl	8000db8 <PCNC_Begin_Cut>
			break;
 80018a4:	e001      	b.n	80018aa <Button_Debounced+0x52>
		default:
			__NOP();
 80018a6:	bf00      	nop
			break;
 80018a8:	bf00      	nop
	}

	button_state++;
 80018aa:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <Button_Debounced+0x64>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b02      	ldr	r3, [pc, #8]	@ (80018bc <Button_Debounced+0x64>)
 80018b4:	701a      	strb	r2, [r3, #0]
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20002170 	.word	0x20002170
 80018c0:	40020c00 	.word	0x40020c00
 80018c4:	2000216c 	.word	0x2000216c

080018c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80018d2:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_GPIO_EXTI_Callback+0x20>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start_IT(&htim3);
 80018da:	4803      	ldr	r0, [pc, #12]	@ (80018e8 <HAL_GPIO_EXTI_Callback+0x20>)
 80018dc:	f001 fa64 	bl	8002da8 <HAL_TIM_Base_Start_IT>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2000204c 	.word	0x2000204c

080018ec <HAL_TIM_PeriodElapsedCallback>:
	static GPIO_PinState last_states[16] = { GPIO_PIN_RESET };
	EXTI->PR;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if (htim == &htim5) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a1d      	ldr	r2, [pc, #116]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d105      	bne.n	8001908 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  PCNC_Servo_Unlock(cutter);
 80018fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fab6 	bl	8000e72 <PCNC_Servo_Unlock>
	  	}
  }
  else if (htim == &htim7) {
	  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
  }
}
 8001906:	e02d      	b.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x78>
  else if (htim == &htim4 )
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a1a      	ldr	r2, [pc, #104]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d105      	bne.n	800191c <HAL_TIM_PeriodElapsedCallback+0x30>
	  PCNC_Stepper_ISR(cutter);
 8001910:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fb40 	bl	8000f9a <PCNC_Stepper_ISR>
}
 800191a:	e023      	b.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x78>
  else if (htim == &htim3) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a16      	ldr	r2, [pc, #88]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d116      	bne.n	8001952 <HAL_TIM_PeriodElapsedCallback+0x66>
	  GPIO_PinState new_state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001924:	2101      	movs	r1, #1
 8001926:	4815      	ldr	r0, [pc, #84]	@ (800197c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001928:	f000 fd26 	bl	8002378 <HAL_GPIO_ReadPin>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]
	  if(new_state != last_state){
 8001930:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	429a      	cmp	r2, r3
 8001938:	d014      	beq.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x78>
	  		HAL_TIM_Base_Stop_IT(&htim3);
 800193a:	480f      	ldr	r0, [pc, #60]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800193c:	f001 faa4 	bl	8002e88 <HAL_TIM_Base_Stop_IT>
	  		if (new_state == GPIO_PIN_SET) {
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_TIM_PeriodElapsedCallback+0x5e>
	  			Button_Debounced();
 8001946:	f7ff ff87 	bl	8001858 <Button_Debounced>
	  		last_state = new_state;
 800194a:	4a0d      	ldr	r2, [pc, #52]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	7013      	strb	r3, [r2, #0]
}
 8001950:	e008      	b.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x78>
  else if (htim == &htim7) {
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a0b      	ldr	r2, [pc, #44]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d104      	bne.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x78>
	  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800195a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800195e:	480a      	ldr	r0, [pc, #40]	@ (8001988 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001960:	f000 fd3b 	bl	80023da <HAL_GPIO_TogglePin>
}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	200020dc 	.word	0x200020dc
 8001970:	2000216c 	.word	0x2000216c
 8001974:	20002094 	.word	0x20002094
 8001978:	2000204c 	.word	0x2000204c
 800197c:	40020000 	.word	0x40020000
 8001980:	20002171 	.word	0x20002171
 8001984:	20002124 	.word	0x20002124
 8001988:	40020c00 	.word	0x40020c00

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <Error_Handler+0x8>

08001998 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	4a0f      	ldr	r2, [pc, #60]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ae:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	4a08      	ldr	r2, [pc, #32]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ca:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019d6:	2007      	movs	r0, #7
 80019d8:	f000 faf0 	bl	8001fbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019f8:	d10e      	bne.n	8001a18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	4b40      	ldr	r3, [pc, #256]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	4a3f      	ldr	r2, [pc, #252]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001a16:	e06e      	b.n	8001af6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM3)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a39      	ldr	r2, [pc, #228]	@ (8001b04 <HAL_TIM_Base_MspInit+0x11c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d116      	bne.n	8001a50 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	4b36      	ldr	r3, [pc, #216]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	4a35      	ldr	r2, [pc, #212]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a32:	4b33      	ldr	r3, [pc, #204]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	201d      	movs	r0, #29
 8001a44:	f000 fac5 	bl	8001fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a48:	201d      	movs	r0, #29
 8001a4a:	f000 fade 	bl	800200a <HAL_NVIC_EnableIRQ>
}
 8001a4e:	e052      	b.n	8001af6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM4)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a2c      	ldr	r2, [pc, #176]	@ (8001b08 <HAL_TIM_Base_MspInit+0x120>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d116      	bne.n	8001a88 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	4b28      	ldr	r3, [pc, #160]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	4a27      	ldr	r2, [pc, #156]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6a:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	201e      	movs	r0, #30
 8001a7c:	f000 faa9 	bl	8001fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a80:	201e      	movs	r0, #30
 8001a82:	f000 fac2 	bl	800200a <HAL_NVIC_EnableIRQ>
}
 8001a86:	e036      	b.n	8001af6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001b0c <HAL_TIM_Base_MspInit+0x124>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d116      	bne.n	8001ac0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	4a19      	ldr	r2, [pc, #100]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2032      	movs	r0, #50	@ 0x32
 8001ab4:	f000 fa8d 	bl	8001fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ab8:	2032      	movs	r0, #50	@ 0x32
 8001aba:	f000 faa6 	bl	800200a <HAL_NVIC_EnableIRQ>
}
 8001abe:	e01a      	b.n	8001af6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a12      	ldr	r2, [pc, #72]	@ (8001b10 <HAL_TIM_Base_MspInit+0x128>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d115      	bne.n	8001af6 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001ad4:	f043 0320 	orr.w	r3, r3, #32
 8001ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ada:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <HAL_TIM_Base_MspInit+0x118>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f003 0320 	and.w	r3, r3, #32
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2037      	movs	r0, #55	@ 0x37
 8001aec:	f000 fa71 	bl	8001fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001af0:	2037      	movs	r0, #55	@ 0x37
 8001af2:	f000 fa8a 	bl	800200a <HAL_NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40000400 	.word	0x40000400
 8001b08:	40000800 	.word	0x40000800
 8001b0c:	40000c00 	.word	0x40000c00
 8001b10:	40001400 	.word	0x40001400

08001b14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b34:	d11e      	bne.n	8001b74 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_TIM_MspPostInit+0x68>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b7c <HAL_TIM_MspPostInit+0x68>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <HAL_TIM_MspPostInit+0x68>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b64:	2301      	movs	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4804      	ldr	r0, [pc, #16]	@ (8001b80 <HAL_TIM_MspPostInit+0x6c>)
 8001b70:	f000 fa66 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020000 	.word	0x40020000

08001b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <NMI_Handler+0x4>

08001b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <HardFault_Handler+0x4>

08001b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <MemManage_Handler+0x4>

08001b9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bda:	f000 f8ff 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f000 fc12 	bl	8002410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEPPER_DOWN_Pin);
 8001bf4:	2040      	movs	r0, #64	@ 0x40
 8001bf6:	f000 fc0b 	bl	8002410 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(STEPPER_UP_Pin);
 8001bfa:	2080      	movs	r0, #128	@ 0x80
 8001bfc:	f000 fc08 	bl	8002410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <TIM3_IRQHandler+0x10>)
 8001c0a:	f001 fa8d 	bl	8003128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000204c 	.word	0x2000204c

08001c18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <TIM4_IRQHandler+0x10>)
 8001c1e:	f001 fa83 	bl	8003128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20002094 	.word	0x20002094

08001c2c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <TIM5_IRQHandler+0x10>)
 8001c32:	f001 fa79 	bl	8003128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200020dc 	.word	0x200020dc

08001c40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <TIM7_IRQHandler+0x10>)
 8001c46:	f001 fa6f 	bl	8003128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20002124 	.word	0x20002124

08001c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c5c:	4a14      	ldr	r2, [pc, #80]	@ (8001cb0 <_sbrk+0x5c>)
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <_sbrk+0x60>)
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c68:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <_sbrk+0x64>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	@ (8001cbc <_sbrk+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c84:	f002 f96c 	bl	8003f60 <__errno>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c94:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a05      	ldr	r2, [pc, #20]	@ (8001cb8 <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20020000 	.word	0x20020000
 8001cb4:	00000400 	.word	0x00000400
 8001cb8:	20002174 	.word	0x20002174
 8001cbc:	200022c8 	.word	0x200022c8

08001cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <SystemInit+0x20>)
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cca:	4a05      	ldr	r2, [pc, #20]	@ (8001ce0 <SystemInit+0x20>)
 8001ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ce4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ce8:	f7ff ffea 	bl	8001cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cec:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cee:	490d      	ldr	r1, [pc, #52]	@ (8001d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf4:	e002      	b.n	8001cfc <LoopCopyDataInit>

08001cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfa:	3304      	adds	r3, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d00:	d3f9      	bcc.n	8001cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d04:	4c0a      	ldr	r4, [pc, #40]	@ (8001d30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d08:	e001      	b.n	8001d0e <LoopFillZerobss>

08001d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d0c:	3204      	adds	r2, #4

08001d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d10:	d3fb      	bcc.n	8001d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d12:	f002 f92b 	bl	8003f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d16:	f7ff fa7d 	bl	8001214 <main>
  bx  lr    
 8001d1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	20001fe4 	.word	0x20001fe4
  ldr r2, =_sidata
 8001d28:	08003ff0 	.word	0x08003ff0
  ldr r2, =_sbss
 8001d2c:	20001fe4 	.word	0x20001fe4
  ldr r4, =_ebss
 8001d30:	200022c4 	.word	0x200022c4

08001d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC_IRQHandler>
	...

08001d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_Init+0x40>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <HAL_Init+0x40>)
 8001d42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <HAL_Init+0x40>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <HAL_Init+0x40>)
 8001d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <HAL_Init+0x40>)
 8001d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 f92b 	bl	8001fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 f808 	bl	8001d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6c:	f7ff fe14 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_InitTick+0x54>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <HAL_InitTick+0x58>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f943 	bl	8002026 <HAL_SYSTICK_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00e      	b.n	8001dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d80a      	bhi.n	8001dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f000 f90b 	bl	8001fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dbc:	4a06      	ldr	r2, [pc, #24]	@ (8001dd8 <HAL_InitTick+0x5c>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20001f88 	.word	0x20001f88
 8001dd4:	20001f90 	.word	0x20001f90
 8001dd8:	20001f8c 	.word	0x20001f8c

08001ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_IncTick+0x20>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_IncTick+0x24>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <HAL_IncTick+0x24>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20001f90 	.word	0x20001f90
 8001e00:	20002178 	.word	0x20002178

08001e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;
 8001e08:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <HAL_GetTick+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20002178 	.word	0x20002178

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	@ (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	@ (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db0b      	blt.n	8001eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4907      	ldr	r1, [pc, #28]	@ (8001eb8 <__NVIC_EnableIRQ+0x38>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000e100 	.word	0xe000e100

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	@ (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	@ (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	@ 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	@ 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f88:	d301      	bcc.n	8001f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00f      	b.n	8001fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <SysTick_Config+0x40>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f96:	210f      	movs	r1, #15
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f7ff ff8e 	bl	8001ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <SysTick_Config+0x40>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa6:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <SysTick_Config+0x40>)
 8001fa8:	2207      	movs	r2, #7
 8001faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	e000e010 	.word	0xe000e010

08001fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ff29 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff ff3e 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff8e 	bl	8001f10 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5d 	bl	8001ebc <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff31 	bl	8001e80 <__NVIC_EnableIRQ>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffa2 	bl	8001f78 <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	@ 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e16b      	b.n	8002334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	f040 815a 	bne.w	800232e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d005      	beq.n	8002092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208e:	2b02      	cmp	r3, #2
 8002090:	d130      	bne.n	80020f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 0201 	and.w	r2, r3, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d017      	beq.n	8002130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d123      	bne.n	8002184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80b4 	beq.w	800232e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b60      	ldr	r3, [pc, #384]	@ (800234c <HAL_GPIO_Init+0x30c>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	4a5f      	ldr	r2, [pc, #380]	@ (800234c <HAL_GPIO_Init+0x30c>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021d6:	4b5d      	ldr	r3, [pc, #372]	@ (800234c <HAL_GPIO_Init+0x30c>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002350 <HAL_GPIO_Init+0x310>)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a52      	ldr	r2, [pc, #328]	@ (8002354 <HAL_GPIO_Init+0x314>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02b      	beq.n	8002266 <HAL_GPIO_Init+0x226>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a51      	ldr	r2, [pc, #324]	@ (8002358 <HAL_GPIO_Init+0x318>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d025      	beq.n	8002262 <HAL_GPIO_Init+0x222>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a50      	ldr	r2, [pc, #320]	@ (800235c <HAL_GPIO_Init+0x31c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01f      	beq.n	800225e <HAL_GPIO_Init+0x21e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4f      	ldr	r2, [pc, #316]	@ (8002360 <HAL_GPIO_Init+0x320>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d019      	beq.n	800225a <HAL_GPIO_Init+0x21a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4e      	ldr	r2, [pc, #312]	@ (8002364 <HAL_GPIO_Init+0x324>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_GPIO_Init+0x216>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4d      	ldr	r2, [pc, #308]	@ (8002368 <HAL_GPIO_Init+0x328>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00d      	beq.n	8002252 <HAL_GPIO_Init+0x212>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4c      	ldr	r2, [pc, #304]	@ (800236c <HAL_GPIO_Init+0x32c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x20e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4b      	ldr	r2, [pc, #300]	@ (8002370 <HAL_GPIO_Init+0x330>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_GPIO_Init+0x20a>
 8002246:	2307      	movs	r3, #7
 8002248:	e00e      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800224a:	2308      	movs	r3, #8
 800224c:	e00c      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800224e:	2306      	movs	r3, #6
 8002250:	e00a      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002252:	2305      	movs	r3, #5
 8002254:	e008      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002256:	2304      	movs	r3, #4
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800225a:	2303      	movs	r3, #3
 800225c:	e004      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800225e:	2302      	movs	r3, #2
 8002260:	e002      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002266:	2300      	movs	r3, #0
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	f002 0203 	and.w	r2, r2, #3
 800226e:	0092      	lsls	r2, r2, #2
 8002270:	4093      	lsls	r3, r2
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002278:	4935      	ldr	r1, [pc, #212]	@ (8002350 <HAL_GPIO_Init+0x310>)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	3302      	adds	r3, #2
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002286:	4b3b      	ldr	r3, [pc, #236]	@ (8002374 <HAL_GPIO_Init+0x334>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022aa:	4a32      	ldr	r2, [pc, #200]	@ (8002374 <HAL_GPIO_Init+0x334>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b0:	4b30      	ldr	r3, [pc, #192]	@ (8002374 <HAL_GPIO_Init+0x334>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d4:	4a27      	ldr	r2, [pc, #156]	@ (8002374 <HAL_GPIO_Init+0x334>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022da:	4b26      	ldr	r3, [pc, #152]	@ (8002374 <HAL_GPIO_Init+0x334>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002374 <HAL_GPIO_Init+0x334>)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002304:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <HAL_GPIO_Init+0x334>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002328:	4a12      	ldr	r2, [pc, #72]	@ (8002374 <HAL_GPIO_Init+0x334>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3301      	adds	r3, #1
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	2b0f      	cmp	r3, #15
 8002338:	f67f ae90 	bls.w	800205c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3724      	adds	r7, #36	@ 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	40013800 	.word	0x40013800
 8002354:	40020000 	.word	0x40020000
 8002358:	40020400 	.word	0x40020400
 800235c:	40020800 	.word	0x40020800
 8002360:	40020c00 	.word	0x40020c00
 8002364:	40021000 	.word	0x40021000
 8002368:	40021400 	.word	0x40021400
 800236c:	40021800 	.word	0x40021800
 8002370:	40021c00 	.word	0x40021c00
 8002374:	40013c00 	.word	0x40013c00

08002378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	887b      	ldrh	r3, [r7, #2]
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e001      	b.n	800239a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
 80023b4:	4613      	mov	r3, r2
 80023b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b8:	787b      	ldrb	r3, [r7, #1]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023be:	887a      	ldrh	r2, [r7, #2]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023c4:	e003      	b.n	80023ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023c6:	887b      	ldrh	r3, [r7, #2]
 80023c8:	041a      	lsls	r2, r3, #16
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	619a      	str	r2, [r3, #24]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023da:	b480      	push	{r7}
 80023dc:	b085      	sub	sp, #20
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023ec:	887a      	ldrh	r2, [r7, #2]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4013      	ands	r3, r2
 80023f2:	041a      	lsls	r2, r3, #16
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	400b      	ands	r3, r1
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	619a      	str	r2, [r3, #24]
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800241a:	4b08      	ldr	r3, [pc, #32]	@ (800243c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002426:	4a05      	ldr	r2, [pc, #20]	@ (800243c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fa4a 	bl	80018c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40013c00 	.word	0x40013c00

08002440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e267      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d075      	beq.n	800254a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800245e:	4b88      	ldr	r3, [pc, #544]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b04      	cmp	r3, #4
 8002468:	d00c      	beq.n	8002484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246a:	4b85      	ldr	r3, [pc, #532]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002472:	2b08      	cmp	r3, #8
 8002474:	d112      	bne.n	800249c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002476:	4b82      	ldr	r3, [pc, #520]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800247e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002482:	d10b      	bne.n	800249c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	4b7e      	ldr	r3, [pc, #504]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d05b      	beq.n	8002548 <HAL_RCC_OscConfig+0x108>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d157      	bne.n	8002548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e242      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a4:	d106      	bne.n	80024b4 <HAL_RCC_OscConfig+0x74>
 80024a6:	4b76      	ldr	r3, [pc, #472]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a75      	ldr	r2, [pc, #468]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e01d      	b.n	80024f0 <HAL_RCC_OscConfig+0xb0>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x98>
 80024be:	4b70      	ldr	r3, [pc, #448]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6f      	ldr	r2, [pc, #444]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6c      	ldr	r2, [pc, #432]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0xb0>
 80024d8:	4b69      	ldr	r3, [pc, #420]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a68      	ldr	r2, [pc, #416]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b66      	ldr	r3, [pc, #408]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a65      	ldr	r2, [pc, #404]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d013      	beq.n	8002520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff fc84 	bl	8001e04 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002500:	f7ff fc80 	bl	8001e04 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	@ 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e207      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b5b      	ldr	r3, [pc, #364]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0xc0>
 800251e:	e014      	b.n	800254a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff fc70 	bl	8001e04 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002528:	f7ff fc6c 	bl	8001e04 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e1f3      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	4b51      	ldr	r3, [pc, #324]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0xe8>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d063      	beq.n	800261e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002556:	4b4a      	ldr	r3, [pc, #296]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b47      	ldr	r3, [pc, #284]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256a:	2b08      	cmp	r3, #8
 800256c:	d11c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256e:	4b44      	ldr	r3, [pc, #272]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d116      	bne.n	80025a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	4b41      	ldr	r3, [pc, #260]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_RCC_OscConfig+0x152>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e1c7      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b3b      	ldr	r3, [pc, #236]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4937      	ldr	r1, [pc, #220]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	e03a      	b.n	800261e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b0:	4b34      	ldr	r3, [pc, #208]	@ (8002684 <HAL_RCC_OscConfig+0x244>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7ff fc25 	bl	8001e04 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025be:	f7ff fc21 	bl	8001e04 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1a8      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b28      	ldr	r3, [pc, #160]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4925      	ldr	r1, [pc, #148]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f2:	4b24      	ldr	r3, [pc, #144]	@ (8002684 <HAL_RCC_OscConfig+0x244>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7ff fc04 	bl	8001e04 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002600:	f7ff fc00 	bl	8001e04 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e187      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d036      	beq.n	8002698 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <HAL_RCC_OscConfig+0x248>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7ff fbe4 	bl	8001e04 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002640:	f7ff fbe0 	bl	8001e04 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e167      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x200>
 800265e:	e01b      	b.n	8002698 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002660:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <HAL_RCC_OscConfig+0x248>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002666:	f7ff fbcd 	bl	8001e04 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	e00e      	b.n	800268c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266e:	f7ff fbc9 	bl	8001e04 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d907      	bls.n	800268c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e150      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
 8002680:	40023800 	.word	0x40023800
 8002684:	42470000 	.word	0x42470000
 8002688:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	4b88      	ldr	r3, [pc, #544]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 800268e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ea      	bne.n	800266e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8097 	beq.w	80027d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026aa:	4b81      	ldr	r3, [pc, #516]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b7d      	ldr	r3, [pc, #500]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	4a7c      	ldr	r2, [pc, #496]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026c6:	4b7a      	ldr	r3, [pc, #488]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	4b77      	ldr	r3, [pc, #476]	@ (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d118      	bne.n	8002714 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e2:	4b74      	ldr	r3, [pc, #464]	@ (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a73      	ldr	r2, [pc, #460]	@ (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ee:	f7ff fb89 	bl	8001e04 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f6:	f7ff fb85 	bl	8001e04 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e10c      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	4b6a      	ldr	r3, [pc, #424]	@ (80028b4 <HAL_RCC_OscConfig+0x474>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x2ea>
 800271c:	4b64      	ldr	r3, [pc, #400]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002720:	4a63      	ldr	r2, [pc, #396]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6713      	str	r3, [r2, #112]	@ 0x70
 8002728:	e01c      	b.n	8002764 <HAL_RCC_OscConfig+0x324>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b05      	cmp	r3, #5
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x30c>
 8002732:	4b5f      	ldr	r3, [pc, #380]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002736:	4a5e      	ldr	r2, [pc, #376]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6713      	str	r3, [r2, #112]	@ 0x70
 800273e:	4b5c      	ldr	r3, [pc, #368]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002742:	4a5b      	ldr	r2, [pc, #364]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6713      	str	r3, [r2, #112]	@ 0x70
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0x324>
 800274c:	4b58      	ldr	r3, [pc, #352]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002750:	4a57      	ldr	r2, [pc, #348]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	6713      	str	r3, [r2, #112]	@ 0x70
 8002758:	4b55      	ldr	r3, [pc, #340]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275c:	4a54      	ldr	r2, [pc, #336]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 800275e:	f023 0304 	bic.w	r3, r3, #4
 8002762:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d015      	beq.n	8002798 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7ff fb4a 	bl	8001e04 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002772:	e00a      	b.n	800278a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7ff fb46 	bl	8001e04 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0cb      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	4b49      	ldr	r3, [pc, #292]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0ee      	beq.n	8002774 <HAL_RCC_OscConfig+0x334>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002798:	f7ff fb34 	bl	8001e04 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7ff fb30 	bl	8001e04 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e0b5      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b6:	4b3e      	ldr	r3, [pc, #248]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1ee      	bne.n	80027a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c8:	4b39      	ldr	r3, [pc, #228]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	4a38      	ldr	r2, [pc, #224]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80a1 	beq.w	8002920 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027de:	4b34      	ldr	r3, [pc, #208]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d05c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d141      	bne.n	8002876 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f2:	4b31      	ldr	r3, [pc, #196]	@ (80028b8 <HAL_RCC_OscConfig+0x478>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7ff fb04 	bl	8001e04 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002800:	f7ff fb00 	bl	8001e04 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e087      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	4b27      	ldr	r3, [pc, #156]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	019b      	lsls	r3, r3, #6
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	041b      	lsls	r3, r3, #16
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	491b      	ldr	r1, [pc, #108]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002848:	4b1b      	ldr	r3, [pc, #108]	@ (80028b8 <HAL_RCC_OscConfig+0x478>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7ff fad9 	bl	8001e04 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002856:	f7ff fad5 	bl	8001e04 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e05c      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002868:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x416>
 8002874:	e054      	b.n	8002920 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002876:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <HAL_RCC_OscConfig+0x478>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7ff fac2 	bl	8001e04 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002884:	f7ff fabe 	bl	8001e04 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e045      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x444>
 80028a2:	e03d      	b.n	8002920 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e038      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40007000 	.word	0x40007000
 80028b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <HAL_RCC_OscConfig+0x4ec>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d028      	beq.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d121      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d11a      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d111      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002902:	085b      	lsrs	r3, r3, #1
 8002904:	3b01      	subs	r3, #1
 8002906:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d107      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002916:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800

08002930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0cc      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002944:	4b68      	ldr	r3, [pc, #416]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d90c      	bls.n	800296c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b65      	ldr	r3, [pc, #404]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b63      	ldr	r3, [pc, #396]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0b8      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002984:	4b59      	ldr	r3, [pc, #356]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a58      	ldr	r2, [pc, #352]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800298e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800299c:	4b53      	ldr	r3, [pc, #332]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a52      	ldr	r2, [pc, #328]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b50      	ldr	r3, [pc, #320]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	494d      	ldr	r1, [pc, #308]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d044      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b47      	ldr	r3, [pc, #284]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d119      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ee:	4b3f      	ldr	r3, [pc, #252]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e06f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	4b3b      	ldr	r3, [pc, #236]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e067      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a0e:	4b37      	ldr	r3, [pc, #220]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f023 0203 	bic.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4934      	ldr	r1, [pc, #208]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a20:	f7ff f9f0 	bl	8001e04 <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a28:	f7ff f9ec 	bl	8001e04 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e04f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 020c 	and.w	r2, r3, #12
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d1eb      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a50:	4b25      	ldr	r3, [pc, #148]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d20c      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e032      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4b19      	ldr	r3, [pc, #100]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4916      	ldr	r1, [pc, #88]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa2:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	490e      	ldr	r1, [pc, #56]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ab6:	f000 f821 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	490a      	ldr	r1, [pc, #40]	@ (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	5ccb      	ldrb	r3, [r1, r3]
 8002aca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ace:	4a09      	ldr	r2, [pc, #36]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ad2:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff f950 	bl	8001d7c <HAL_InitTick>

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00
 8002aec:	40023800 	.word	0x40023800
 8002af0:	08003fd0 	.word	0x08003fd0
 8002af4:	20001f88 	.word	0x20001f88
 8002af8:	20001f8c 	.word	0x20001f8c

08002afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b00:	b094      	sub	sp, #80	@ 0x50
 8002b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b08:	2300      	movs	r3, #0
 8002b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b14:	4b79      	ldr	r3, [pc, #484]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d00d      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x40>
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	f200 80e1 	bhi.w	8002ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x34>
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b2e:	e0db      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b73      	ldr	r3, [pc, #460]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b32:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002b34:	e0db      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b36:	4b73      	ldr	r3, [pc, #460]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b3a:	e0d8      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b44:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b46:	4b6d      	ldr	r3, [pc, #436]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d063      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b52:	4b6a      	ldr	r3, [pc, #424]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	099b      	lsrs	r3, r3, #6
 8002b58:	2200      	movs	r2, #0
 8002b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b66:	2300      	movs	r3, #0
 8002b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b6e:	4622      	mov	r2, r4
 8002b70:	462b      	mov	r3, r5
 8002b72:	f04f 0000 	mov.w	r0, #0
 8002b76:	f04f 0100 	mov.w	r1, #0
 8002b7a:	0159      	lsls	r1, r3, #5
 8002b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b80:	0150      	lsls	r0, r2, #5
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4621      	mov	r1, r4
 8002b88:	1a51      	subs	r1, r2, r1
 8002b8a:	6139      	str	r1, [r7, #16]
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ba0:	4659      	mov	r1, fp
 8002ba2:	018b      	lsls	r3, r1, #6
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002baa:	4651      	mov	r1, sl
 8002bac:	018a      	lsls	r2, r1, #6
 8002bae:	4651      	mov	r1, sl
 8002bb0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bb4:	4659      	mov	r1, fp
 8002bb6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bce:	4690      	mov	r8, r2
 8002bd0:	4699      	mov	r9, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	eb18 0303 	adds.w	r3, r8, r3
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	462b      	mov	r3, r5
 8002bdc:	eb49 0303 	adc.w	r3, r9, r3
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bee:	4629      	mov	r1, r5
 8002bf0:	024b      	lsls	r3, r1, #9
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	024a      	lsls	r2, r1, #9
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c02:	2200      	movs	r2, #0
 8002c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c0c:	f7fd fef2 	bl	80009f4 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c18:	e058      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b38      	ldr	r3, [pc, #224]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	2200      	movs	r2, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	4611      	mov	r1, r2
 8002c26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c34:	4642      	mov	r2, r8
 8002c36:	464b      	mov	r3, r9
 8002c38:	f04f 0000 	mov.w	r0, #0
 8002c3c:	f04f 0100 	mov.w	r1, #0
 8002c40:	0159      	lsls	r1, r3, #5
 8002c42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c46:	0150      	lsls	r0, r2, #5
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c52:	4649      	mov	r1, r9
 8002c54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c70:	eb63 050b 	sbc.w	r5, r3, fp
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	00eb      	lsls	r3, r5, #3
 8002c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c82:	00e2      	lsls	r2, r4, #3
 8002c84:	4614      	mov	r4, r2
 8002c86:	461d      	mov	r5, r3
 8002c88:	4643      	mov	r3, r8
 8002c8a:	18e3      	adds	r3, r4, r3
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	464b      	mov	r3, r9
 8002c90:	eb45 0303 	adc.w	r3, r5, r3
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	028b      	lsls	r3, r1, #10
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cac:	4621      	mov	r1, r4
 8002cae:	028a      	lsls	r2, r1, #10
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	61fa      	str	r2, [r7, #28]
 8002cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc0:	f7fd fe98 	bl	80009f4 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002cdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3750      	adds	r7, #80	@ 0x50
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	007a1200 	.word	0x007a1200

08002d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e041      	b.n	8002d9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fe fe5a 	bl	80019e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f000 fc90 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d001      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e04e      	b.n	8002e5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a23      	ldr	r2, [pc, #140]	@ (8002e6c <HAL_TIM_Base_Start_IT+0xc4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d022      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x80>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dea:	d01d      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x80>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e70 <HAL_TIM_Base_Start_IT+0xc8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d018      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x80>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8002e74 <HAL_TIM_Base_Start_IT+0xcc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x80>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1c      	ldr	r2, [pc, #112]	@ (8002e78 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00e      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x80>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8002e7c <HAL_TIM_Base_Start_IT+0xd4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x80>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a19      	ldr	r2, [pc, #100]	@ (8002e80 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x80>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a18      	ldr	r2, [pc, #96]	@ (8002e84 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d111      	bne.n	8002e4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d010      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0201 	orr.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4a:	e007      	b.n	8002e5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40010000 	.word	0x40010000
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40000800 	.word	0x40000800
 8002e78:	40000c00 	.word	0x40000c00
 8002e7c:	40010400 	.word	0x40010400
 8002e80:	40014000 	.word	0x40014000
 8002e84:	40001800 	.word	0x40001800

08002e88 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6a1a      	ldr	r2, [r3, #32]
 8002ea6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10f      	bne.n	8002ed0 <HAL_TIM_Base_Stop_IT+0x48>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6a1a      	ldr	r2, [r3, #32]
 8002eb6:	f240 4344 	movw	r3, #1092	@ 0x444
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d107      	bne.n	8002ed0 <HAL_TIM_Base_Stop_IT+0x48>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e041      	b.n	8002f7c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f839 	bl	8002f84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2202      	movs	r2, #2
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3304      	adds	r3, #4
 8002f22:	4619      	mov	r1, r3
 8002f24:	4610      	mov	r0, r2
 8002f26:	f000 fba1 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <HAL_TIM_PWM_Start+0x24>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	bf14      	ite	ne
 8002fb4:	2301      	movne	r3, #1
 8002fb6:	2300      	moveq	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e022      	b.n	8003002 <HAL_TIM_PWM_Start+0x6a>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d109      	bne.n	8002fd6 <HAL_TIM_PWM_Start+0x3e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	bf14      	ite	ne
 8002fce:	2301      	movne	r3, #1
 8002fd0:	2300      	moveq	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	e015      	b.n	8003002 <HAL_TIM_PWM_Start+0x6a>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d109      	bne.n	8002ff0 <HAL_TIM_PWM_Start+0x58>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e008      	b.n	8003002 <HAL_TIM_PWM_Start+0x6a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e07c      	b.n	8003104 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <HAL_TIM_PWM_Start+0x82>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003018:	e013      	b.n	8003042 <HAL_TIM_PWM_Start+0xaa>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b04      	cmp	r3, #4
 800301e:	d104      	bne.n	800302a <HAL_TIM_PWM_Start+0x92>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003028:	e00b      	b.n	8003042 <HAL_TIM_PWM_Start+0xaa>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d104      	bne.n	800303a <HAL_TIM_PWM_Start+0xa2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003038:	e003      	b.n	8003042 <HAL_TIM_PWM_Start+0xaa>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2201      	movs	r2, #1
 8003048:	6839      	ldr	r1, [r7, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fe04 	bl	8003c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a2d      	ldr	r2, [pc, #180]	@ (800310c <HAL_TIM_PWM_Start+0x174>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d004      	beq.n	8003064 <HAL_TIM_PWM_Start+0xcc>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a2c      	ldr	r2, [pc, #176]	@ (8003110 <HAL_TIM_PWM_Start+0x178>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d101      	bne.n	8003068 <HAL_TIM_PWM_Start+0xd0>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_TIM_PWM_Start+0xd2>
 8003068:	2300      	movs	r3, #0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d007      	beq.n	800307e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800307c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a22      	ldr	r2, [pc, #136]	@ (800310c <HAL_TIM_PWM_Start+0x174>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d022      	beq.n	80030ce <HAL_TIM_PWM_Start+0x136>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003090:	d01d      	beq.n	80030ce <HAL_TIM_PWM_Start+0x136>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1f      	ldr	r2, [pc, #124]	@ (8003114 <HAL_TIM_PWM_Start+0x17c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d018      	beq.n	80030ce <HAL_TIM_PWM_Start+0x136>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003118 <HAL_TIM_PWM_Start+0x180>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <HAL_TIM_PWM_Start+0x136>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1c      	ldr	r2, [pc, #112]	@ (800311c <HAL_TIM_PWM_Start+0x184>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00e      	beq.n	80030ce <HAL_TIM_PWM_Start+0x136>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a16      	ldr	r2, [pc, #88]	@ (8003110 <HAL_TIM_PWM_Start+0x178>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d009      	beq.n	80030ce <HAL_TIM_PWM_Start+0x136>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a18      	ldr	r2, [pc, #96]	@ (8003120 <HAL_TIM_PWM_Start+0x188>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <HAL_TIM_PWM_Start+0x136>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a16      	ldr	r2, [pc, #88]	@ (8003124 <HAL_TIM_PWM_Start+0x18c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d111      	bne.n	80030f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b06      	cmp	r3, #6
 80030de:	d010      	beq.n	8003102 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	e007      	b.n	8003102 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0201 	orr.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40010000 	.word	0x40010000
 8003110:	40010400 	.word	0x40010400
 8003114:	40000400 	.word	0x40000400
 8003118:	40000800 	.word	0x40000800
 800311c:	40000c00 	.word	0x40000c00
 8003120:	40014000 	.word	0x40014000
 8003124:	40001800 	.word	0x40001800

08003128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d020      	beq.n	800318c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01b      	beq.n	800318c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0202 	mvn.w	r2, #2
 800315c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fa5b 	bl	800362e <HAL_TIM_IC_CaptureCallback>
 8003178:	e005      	b.n	8003186 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fa4d 	bl	800361a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fa5e 	bl	8003642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d020      	beq.n	80031d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01b      	beq.n	80031d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0204 	mvn.w	r2, #4
 80031a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fa35 	bl	800362e <HAL_TIM_IC_CaptureCallback>
 80031c4:	e005      	b.n	80031d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fa27 	bl	800361a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fa38 	bl	8003642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d020      	beq.n	8003224 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01b      	beq.n	8003224 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0208 	mvn.w	r2, #8
 80031f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2204      	movs	r2, #4
 80031fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fa0f 	bl	800362e <HAL_TIM_IC_CaptureCallback>
 8003210:	e005      	b.n	800321e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fa01 	bl	800361a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fa12 	bl	8003642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b00      	cmp	r3, #0
 800322c:	d020      	beq.n	8003270 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b00      	cmp	r3, #0
 8003236:	d01b      	beq.n	8003270 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0210 	mvn.w	r2, #16
 8003240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2208      	movs	r2, #8
 8003246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f9e9 	bl	800362e <HAL_TIM_IC_CaptureCallback>
 800325c:	e005      	b.n	800326a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f9db 	bl	800361a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f9ec 	bl	8003642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00c      	beq.n	8003294 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0201 	mvn.w	r2, #1
 800328c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fe fb2c 	bl	80018ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00c      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fd7c 	bl	8003db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f9bd 	bl	8003656 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00c      	beq.n	8003300 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0220 	mvn.w	r2, #32
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fd4e 	bl	8003d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003322:	2302      	movs	r3, #2
 8003324:	e0ae      	b.n	8003484 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b0c      	cmp	r3, #12
 8003332:	f200 809f 	bhi.w	8003474 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003336:	a201      	add	r2, pc, #4	@ (adr r2, 800333c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	08003371 	.word	0x08003371
 8003340:	08003475 	.word	0x08003475
 8003344:	08003475 	.word	0x08003475
 8003348:	08003475 	.word	0x08003475
 800334c:	080033b1 	.word	0x080033b1
 8003350:	08003475 	.word	0x08003475
 8003354:	08003475 	.word	0x08003475
 8003358:	08003475 	.word	0x08003475
 800335c:	080033f3 	.word	0x080033f3
 8003360:	08003475 	.word	0x08003475
 8003364:	08003475 	.word	0x08003475
 8003368:	08003475 	.word	0x08003475
 800336c:	08003433 	.word	0x08003433
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fa24 	bl	80037c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0208 	orr.w	r2, r2, #8
 800338a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0204 	bic.w	r2, r2, #4
 800339a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6999      	ldr	r1, [r3, #24]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	619a      	str	r2, [r3, #24]
      break;
 80033ae:	e064      	b.n	800347a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fa74 	bl	80038a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6999      	ldr	r1, [r3, #24]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	021a      	lsls	r2, r3, #8
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	619a      	str	r2, [r3, #24]
      break;
 80033f0:	e043      	b.n	800347a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fac9 	bl	8003990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0208 	orr.w	r2, r2, #8
 800340c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0204 	bic.w	r2, r2, #4
 800341c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69d9      	ldr	r1, [r3, #28]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	61da      	str	r2, [r3, #28]
      break;
 8003430:	e023      	b.n	800347a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fb1d 	bl	8003a78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800344c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800345c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69d9      	ldr	r1, [r3, #28]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	021a      	lsls	r2, r3, #8
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	61da      	str	r2, [r3, #28]
      break;
 8003472:	e002      	b.n	800347a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	75fb      	strb	r3, [r7, #23]
      break;
 8003478:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003482:	7dfb      	ldrb	r3, [r7, #23]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_TIM_ConfigClockSource+0x1c>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e0b4      	b.n	8003612 <HAL_TIM_ConfigClockSource+0x186>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e0:	d03e      	beq.n	8003560 <HAL_TIM_ConfigClockSource+0xd4>
 80034e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e6:	f200 8087 	bhi.w	80035f8 <HAL_TIM_ConfigClockSource+0x16c>
 80034ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ee:	f000 8086 	beq.w	80035fe <HAL_TIM_ConfigClockSource+0x172>
 80034f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f6:	d87f      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x16c>
 80034f8:	2b70      	cmp	r3, #112	@ 0x70
 80034fa:	d01a      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0xa6>
 80034fc:	2b70      	cmp	r3, #112	@ 0x70
 80034fe:	d87b      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003500:	2b60      	cmp	r3, #96	@ 0x60
 8003502:	d050      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003504:	2b60      	cmp	r3, #96	@ 0x60
 8003506:	d877      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003508:	2b50      	cmp	r3, #80	@ 0x50
 800350a:	d03c      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0xfa>
 800350c:	2b50      	cmp	r3, #80	@ 0x50
 800350e:	d873      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003510:	2b40      	cmp	r3, #64	@ 0x40
 8003512:	d058      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003514:	2b40      	cmp	r3, #64	@ 0x40
 8003516:	d86f      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003518:	2b30      	cmp	r3, #48	@ 0x30
 800351a:	d064      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x15a>
 800351c:	2b30      	cmp	r3, #48	@ 0x30
 800351e:	d86b      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003520:	2b20      	cmp	r3, #32
 8003522:	d060      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003524:	2b20      	cmp	r3, #32
 8003526:	d867      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d05c      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x15a>
 800352c:	2b10      	cmp	r3, #16
 800352e:	d05a      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003530:	e062      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003542:	f000 fb69 	bl	8003c18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003554:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	609a      	str	r2, [r3, #8]
      break;
 800355e:	e04f      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003570:	f000 fb52 	bl	8003c18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003582:	609a      	str	r2, [r3, #8]
      break;
 8003584:	e03c      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003592:	461a      	mov	r2, r3
 8003594:	f000 fac6 	bl	8003b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2150      	movs	r1, #80	@ 0x50
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fb1f 	bl	8003be2 <TIM_ITRx_SetConfig>
      break;
 80035a4:	e02c      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035b2:	461a      	mov	r2, r3
 80035b4:	f000 fae5 	bl	8003b82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2160      	movs	r1, #96	@ 0x60
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fb0f 	bl	8003be2 <TIM_ITRx_SetConfig>
      break;
 80035c4:	e01c      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d2:	461a      	mov	r2, r3
 80035d4:	f000 faa6 	bl	8003b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2140      	movs	r1, #64	@ 0x40
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 faff 	bl	8003be2 <TIM_ITRx_SetConfig>
      break;
 80035e4:	e00c      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f000 faf6 	bl	8003be2 <TIM_ITRx_SetConfig>
      break;
 80035f6:	e003      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
      break;
 80035fc:	e000      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a46      	ldr	r2, [pc, #280]	@ (8003798 <TIM_Base_SetConfig+0x12c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d013      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800368a:	d00f      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a43      	ldr	r2, [pc, #268]	@ (800379c <TIM_Base_SetConfig+0x130>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00b      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a42      	ldr	r2, [pc, #264]	@ (80037a0 <TIM_Base_SetConfig+0x134>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d007      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a41      	ldr	r2, [pc, #260]	@ (80037a4 <TIM_Base_SetConfig+0x138>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a40      	ldr	r2, [pc, #256]	@ (80037a8 <TIM_Base_SetConfig+0x13c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d108      	bne.n	80036be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a35      	ldr	r2, [pc, #212]	@ (8003798 <TIM_Base_SetConfig+0x12c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036cc:	d027      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a32      	ldr	r2, [pc, #200]	@ (800379c <TIM_Base_SetConfig+0x130>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d023      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a31      	ldr	r2, [pc, #196]	@ (80037a0 <TIM_Base_SetConfig+0x134>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01f      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a30      	ldr	r2, [pc, #192]	@ (80037a4 <TIM_Base_SetConfig+0x138>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a2f      	ldr	r2, [pc, #188]	@ (80037a8 <TIM_Base_SetConfig+0x13c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d017      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a2e      	ldr	r2, [pc, #184]	@ (80037ac <TIM_Base_SetConfig+0x140>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a2d      	ldr	r2, [pc, #180]	@ (80037b0 <TIM_Base_SetConfig+0x144>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00f      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a2c      	ldr	r2, [pc, #176]	@ (80037b4 <TIM_Base_SetConfig+0x148>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2b      	ldr	r2, [pc, #172]	@ (80037b8 <TIM_Base_SetConfig+0x14c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a2a      	ldr	r2, [pc, #168]	@ (80037bc <TIM_Base_SetConfig+0x150>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d003      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a29      	ldr	r2, [pc, #164]	@ (80037c0 <TIM_Base_SetConfig+0x154>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d108      	bne.n	8003730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a10      	ldr	r2, [pc, #64]	@ (8003798 <TIM_Base_SetConfig+0x12c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_Base_SetConfig+0xf8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a12      	ldr	r2, [pc, #72]	@ (80037a8 <TIM_Base_SetConfig+0x13c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d103      	bne.n	800376c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d105      	bne.n	800378a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f023 0201 	bic.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	611a      	str	r2, [r3, #16]
  }
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40010000 	.word	0x40010000
 800379c:	40000400 	.word	0x40000400
 80037a0:	40000800 	.word	0x40000800
 80037a4:	40000c00 	.word	0x40000c00
 80037a8:	40010400 	.word	0x40010400
 80037ac:	40014000 	.word	0x40014000
 80037b0:	40014400 	.word	0x40014400
 80037b4:	40014800 	.word	0x40014800
 80037b8:	40001800 	.word	0x40001800
 80037bc:	40001c00 	.word	0x40001c00
 80037c0:	40002000 	.word	0x40002000

080037c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f023 0201 	bic.w	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0303 	bic.w	r3, r3, #3
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f023 0302 	bic.w	r3, r3, #2
 800380c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a20      	ldr	r2, [pc, #128]	@ (800389c <TIM_OC1_SetConfig+0xd8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d003      	beq.n	8003828 <TIM_OC1_SetConfig+0x64>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a1f      	ldr	r2, [pc, #124]	@ (80038a0 <TIM_OC1_SetConfig+0xdc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d10c      	bne.n	8003842 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0308 	bic.w	r3, r3, #8
 800382e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f023 0304 	bic.w	r3, r3, #4
 8003840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a15      	ldr	r2, [pc, #84]	@ (800389c <TIM_OC1_SetConfig+0xd8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d003      	beq.n	8003852 <TIM_OC1_SetConfig+0x8e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a14      	ldr	r2, [pc, #80]	@ (80038a0 <TIM_OC1_SetConfig+0xdc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d111      	bne.n	8003876 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	621a      	str	r2, [r3, #32]
}
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	40010000 	.word	0x40010000
 80038a0:	40010400 	.word	0x40010400

080038a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f023 0210 	bic.w	r2, r3, #16
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f023 0320 	bic.w	r3, r3, #32
 80038ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a22      	ldr	r2, [pc, #136]	@ (8003988 <TIM_OC2_SetConfig+0xe4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <TIM_OC2_SetConfig+0x68>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a21      	ldr	r2, [pc, #132]	@ (800398c <TIM_OC2_SetConfig+0xe8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10d      	bne.n	8003928 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003926:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a17      	ldr	r2, [pc, #92]	@ (8003988 <TIM_OC2_SetConfig+0xe4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <TIM_OC2_SetConfig+0x94>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a16      	ldr	r2, [pc, #88]	@ (800398c <TIM_OC2_SetConfig+0xe8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d113      	bne.n	8003960 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800393e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	621a      	str	r2, [r3, #32]
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40010000 	.word	0x40010000
 800398c:	40010400 	.word	0x40010400

08003990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0303 	bic.w	r3, r3, #3
 80039c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a21      	ldr	r2, [pc, #132]	@ (8003a70 <TIM_OC3_SetConfig+0xe0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d003      	beq.n	80039f6 <TIM_OC3_SetConfig+0x66>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a20      	ldr	r2, [pc, #128]	@ (8003a74 <TIM_OC3_SetConfig+0xe4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d10d      	bne.n	8003a12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a16      	ldr	r2, [pc, #88]	@ (8003a70 <TIM_OC3_SetConfig+0xe0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d003      	beq.n	8003a22 <TIM_OC3_SetConfig+0x92>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a15      	ldr	r2, [pc, #84]	@ (8003a74 <TIM_OC3_SetConfig+0xe4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d113      	bne.n	8003a4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	621a      	str	r2, [r3, #32]
}
 8003a64:	bf00      	nop
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	40010000 	.word	0x40010000
 8003a74:	40010400 	.word	0x40010400

08003a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	031b      	lsls	r3, r3, #12
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a12      	ldr	r2, [pc, #72]	@ (8003b1c <TIM_OC4_SetConfig+0xa4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_OC4_SetConfig+0x68>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a11      	ldr	r2, [pc, #68]	@ (8003b20 <TIM_OC4_SetConfig+0xa8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d109      	bne.n	8003af4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	019b      	lsls	r3, r3, #6
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	621a      	str	r2, [r3, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40010000 	.word	0x40010000
 8003b20:	40010400 	.word	0x40010400

08003b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f023 0201 	bic.w	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f023 030a 	bic.w	r3, r3, #10
 8003b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b087      	sub	sp, #28
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f023 0210 	bic.w	r2, r3, #16
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	031b      	lsls	r3, r3, #12
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	621a      	str	r2, [r3, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b085      	sub	sp, #20
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f043 0307 	orr.w	r3, r3, #7
 8003c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	609a      	str	r2, [r3, #8]
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	021a      	lsls	r2, r3, #8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	609a      	str	r2, [r3, #8]
}
 8003c4c:	bf00      	nop
 8003c4e:	371c      	adds	r7, #28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1a      	ldr	r2, [r3, #32]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a1a      	ldr	r2, [r3, #32]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e05a      	b.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a21      	ldr	r2, [pc, #132]	@ (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d022      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d08:	d01d      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d018      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1b      	ldr	r2, [pc, #108]	@ (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1a      	ldr	r2, [pc, #104]	@ (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00e      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a18      	ldr	r2, [pc, #96]	@ (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d009      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a17      	ldr	r2, [pc, #92]	@ (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a15      	ldr	r2, [pc, #84]	@ (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d10c      	bne.n	8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40010000 	.word	0x40010000
 8003d84:	40000400 	.word	0x40000400
 8003d88:	40000800 	.word	0x40000800
 8003d8c:	40000c00 	.word	0x40000c00
 8003d90:	40010400 	.word	0x40010400
 8003d94:	40014000 	.word	0x40014000
 8003d98:	40001800 	.word	0x40001800

08003d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <malloc>:
 8003dc4:	4b02      	ldr	r3, [pc, #8]	@ (8003dd0 <malloc+0xc>)
 8003dc6:	4601      	mov	r1, r0
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	f000 b825 	b.w	8003e18 <_malloc_r>
 8003dce:	bf00      	nop
 8003dd0:	20001f94 	.word	0x20001f94

08003dd4 <sbrk_aligned>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	4e0f      	ldr	r6, [pc, #60]	@ (8003e14 <sbrk_aligned+0x40>)
 8003dd8:	460c      	mov	r4, r1
 8003dda:	6831      	ldr	r1, [r6, #0]
 8003ddc:	4605      	mov	r5, r0
 8003dde:	b911      	cbnz	r1, 8003de6 <sbrk_aligned+0x12>
 8003de0:	f000 f8ae 	bl	8003f40 <_sbrk_r>
 8003de4:	6030      	str	r0, [r6, #0]
 8003de6:	4621      	mov	r1, r4
 8003de8:	4628      	mov	r0, r5
 8003dea:	f000 f8a9 	bl	8003f40 <_sbrk_r>
 8003dee:	1c43      	adds	r3, r0, #1
 8003df0:	d103      	bne.n	8003dfa <sbrk_aligned+0x26>
 8003df2:	f04f 34ff 	mov.w	r4, #4294967295
 8003df6:	4620      	mov	r0, r4
 8003df8:	bd70      	pop	{r4, r5, r6, pc}
 8003dfa:	1cc4      	adds	r4, r0, #3
 8003dfc:	f024 0403 	bic.w	r4, r4, #3
 8003e00:	42a0      	cmp	r0, r4
 8003e02:	d0f8      	beq.n	8003df6 <sbrk_aligned+0x22>
 8003e04:	1a21      	subs	r1, r4, r0
 8003e06:	4628      	mov	r0, r5
 8003e08:	f000 f89a 	bl	8003f40 <_sbrk_r>
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d1f2      	bne.n	8003df6 <sbrk_aligned+0x22>
 8003e10:	e7ef      	b.n	8003df2 <sbrk_aligned+0x1e>
 8003e12:	bf00      	nop
 8003e14:	2000217c 	.word	0x2000217c

08003e18 <_malloc_r>:
 8003e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e1c:	1ccd      	adds	r5, r1, #3
 8003e1e:	f025 0503 	bic.w	r5, r5, #3
 8003e22:	3508      	adds	r5, #8
 8003e24:	2d0c      	cmp	r5, #12
 8003e26:	bf38      	it	cc
 8003e28:	250c      	movcc	r5, #12
 8003e2a:	2d00      	cmp	r5, #0
 8003e2c:	4606      	mov	r6, r0
 8003e2e:	db01      	blt.n	8003e34 <_malloc_r+0x1c>
 8003e30:	42a9      	cmp	r1, r5
 8003e32:	d904      	bls.n	8003e3e <_malloc_r+0x26>
 8003e34:	230c      	movs	r3, #12
 8003e36:	6033      	str	r3, [r6, #0]
 8003e38:	2000      	movs	r0, #0
 8003e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f14 <_malloc_r+0xfc>
 8003e42:	f000 f869 	bl	8003f18 <__malloc_lock>
 8003e46:	f8d8 3000 	ldr.w	r3, [r8]
 8003e4a:	461c      	mov	r4, r3
 8003e4c:	bb44      	cbnz	r4, 8003ea0 <_malloc_r+0x88>
 8003e4e:	4629      	mov	r1, r5
 8003e50:	4630      	mov	r0, r6
 8003e52:	f7ff ffbf 	bl	8003dd4 <sbrk_aligned>
 8003e56:	1c43      	adds	r3, r0, #1
 8003e58:	4604      	mov	r4, r0
 8003e5a:	d158      	bne.n	8003f0e <_malloc_r+0xf6>
 8003e5c:	f8d8 4000 	ldr.w	r4, [r8]
 8003e60:	4627      	mov	r7, r4
 8003e62:	2f00      	cmp	r7, #0
 8003e64:	d143      	bne.n	8003eee <_malloc_r+0xd6>
 8003e66:	2c00      	cmp	r4, #0
 8003e68:	d04b      	beq.n	8003f02 <_malloc_r+0xea>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	4639      	mov	r1, r7
 8003e6e:	4630      	mov	r0, r6
 8003e70:	eb04 0903 	add.w	r9, r4, r3
 8003e74:	f000 f864 	bl	8003f40 <_sbrk_r>
 8003e78:	4581      	cmp	r9, r0
 8003e7a:	d142      	bne.n	8003f02 <_malloc_r+0xea>
 8003e7c:	6821      	ldr	r1, [r4, #0]
 8003e7e:	1a6d      	subs	r5, r5, r1
 8003e80:	4629      	mov	r1, r5
 8003e82:	4630      	mov	r0, r6
 8003e84:	f7ff ffa6 	bl	8003dd4 <sbrk_aligned>
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d03a      	beq.n	8003f02 <_malloc_r+0xea>
 8003e8c:	6823      	ldr	r3, [r4, #0]
 8003e8e:	442b      	add	r3, r5
 8003e90:	6023      	str	r3, [r4, #0]
 8003e92:	f8d8 3000 	ldr.w	r3, [r8]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	bb62      	cbnz	r2, 8003ef4 <_malloc_r+0xdc>
 8003e9a:	f8c8 7000 	str.w	r7, [r8]
 8003e9e:	e00f      	b.n	8003ec0 <_malloc_r+0xa8>
 8003ea0:	6822      	ldr	r2, [r4, #0]
 8003ea2:	1b52      	subs	r2, r2, r5
 8003ea4:	d420      	bmi.n	8003ee8 <_malloc_r+0xd0>
 8003ea6:	2a0b      	cmp	r2, #11
 8003ea8:	d917      	bls.n	8003eda <_malloc_r+0xc2>
 8003eaa:	1961      	adds	r1, r4, r5
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	6025      	str	r5, [r4, #0]
 8003eb0:	bf18      	it	ne
 8003eb2:	6059      	strne	r1, [r3, #4]
 8003eb4:	6863      	ldr	r3, [r4, #4]
 8003eb6:	bf08      	it	eq
 8003eb8:	f8c8 1000 	streq.w	r1, [r8]
 8003ebc:	5162      	str	r2, [r4, r5]
 8003ebe:	604b      	str	r3, [r1, #4]
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f000 f82f 	bl	8003f24 <__malloc_unlock>
 8003ec6:	f104 000b 	add.w	r0, r4, #11
 8003eca:	1d23      	adds	r3, r4, #4
 8003ecc:	f020 0007 	bic.w	r0, r0, #7
 8003ed0:	1ac2      	subs	r2, r0, r3
 8003ed2:	bf1c      	itt	ne
 8003ed4:	1a1b      	subne	r3, r3, r0
 8003ed6:	50a3      	strne	r3, [r4, r2]
 8003ed8:	e7af      	b.n	8003e3a <_malloc_r+0x22>
 8003eda:	6862      	ldr	r2, [r4, #4]
 8003edc:	42a3      	cmp	r3, r4
 8003ede:	bf0c      	ite	eq
 8003ee0:	f8c8 2000 	streq.w	r2, [r8]
 8003ee4:	605a      	strne	r2, [r3, #4]
 8003ee6:	e7eb      	b.n	8003ec0 <_malloc_r+0xa8>
 8003ee8:	4623      	mov	r3, r4
 8003eea:	6864      	ldr	r4, [r4, #4]
 8003eec:	e7ae      	b.n	8003e4c <_malloc_r+0x34>
 8003eee:	463c      	mov	r4, r7
 8003ef0:	687f      	ldr	r7, [r7, #4]
 8003ef2:	e7b6      	b.n	8003e62 <_malloc_r+0x4a>
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	42a3      	cmp	r3, r4
 8003efa:	d1fb      	bne.n	8003ef4 <_malloc_r+0xdc>
 8003efc:	2300      	movs	r3, #0
 8003efe:	6053      	str	r3, [r2, #4]
 8003f00:	e7de      	b.n	8003ec0 <_malloc_r+0xa8>
 8003f02:	230c      	movs	r3, #12
 8003f04:	6033      	str	r3, [r6, #0]
 8003f06:	4630      	mov	r0, r6
 8003f08:	f000 f80c 	bl	8003f24 <__malloc_unlock>
 8003f0c:	e794      	b.n	8003e38 <_malloc_r+0x20>
 8003f0e:	6005      	str	r5, [r0, #0]
 8003f10:	e7d6      	b.n	8003ec0 <_malloc_r+0xa8>
 8003f12:	bf00      	nop
 8003f14:	20002180 	.word	0x20002180

08003f18 <__malloc_lock>:
 8003f18:	4801      	ldr	r0, [pc, #4]	@ (8003f20 <__malloc_lock+0x8>)
 8003f1a:	f000 b84b 	b.w	8003fb4 <__retarget_lock_acquire_recursive>
 8003f1e:	bf00      	nop
 8003f20:	200022c0 	.word	0x200022c0

08003f24 <__malloc_unlock>:
 8003f24:	4801      	ldr	r0, [pc, #4]	@ (8003f2c <__malloc_unlock+0x8>)
 8003f26:	f000 b846 	b.w	8003fb6 <__retarget_lock_release_recursive>
 8003f2a:	bf00      	nop
 8003f2c:	200022c0 	.word	0x200022c0

08003f30 <memset>:
 8003f30:	4402      	add	r2, r0
 8003f32:	4603      	mov	r3, r0
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d100      	bne.n	8003f3a <memset+0xa>
 8003f38:	4770      	bx	lr
 8003f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f3e:	e7f9      	b.n	8003f34 <memset+0x4>

08003f40 <_sbrk_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4d06      	ldr	r5, [pc, #24]	@ (8003f5c <_sbrk_r+0x1c>)
 8003f44:	2300      	movs	r3, #0
 8003f46:	4604      	mov	r4, r0
 8003f48:	4608      	mov	r0, r1
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	f7fd fe82 	bl	8001c54 <_sbrk>
 8003f50:	1c43      	adds	r3, r0, #1
 8003f52:	d102      	bne.n	8003f5a <_sbrk_r+0x1a>
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	b103      	cbz	r3, 8003f5a <_sbrk_r+0x1a>
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	bd38      	pop	{r3, r4, r5, pc}
 8003f5c:	200022bc 	.word	0x200022bc

08003f60 <__errno>:
 8003f60:	4b01      	ldr	r3, [pc, #4]	@ (8003f68 <__errno+0x8>)
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20001f94 	.word	0x20001f94

08003f6c <__libc_init_array>:
 8003f6c:	b570      	push	{r4, r5, r6, lr}
 8003f6e:	4d0d      	ldr	r5, [pc, #52]	@ (8003fa4 <__libc_init_array+0x38>)
 8003f70:	4c0d      	ldr	r4, [pc, #52]	@ (8003fa8 <__libc_init_array+0x3c>)
 8003f72:	1b64      	subs	r4, r4, r5
 8003f74:	10a4      	asrs	r4, r4, #2
 8003f76:	2600      	movs	r6, #0
 8003f78:	42a6      	cmp	r6, r4
 8003f7a:	d109      	bne.n	8003f90 <__libc_init_array+0x24>
 8003f7c:	4d0b      	ldr	r5, [pc, #44]	@ (8003fac <__libc_init_array+0x40>)
 8003f7e:	4c0c      	ldr	r4, [pc, #48]	@ (8003fb0 <__libc_init_array+0x44>)
 8003f80:	f000 f81a 	bl	8003fb8 <_init>
 8003f84:	1b64      	subs	r4, r4, r5
 8003f86:	10a4      	asrs	r4, r4, #2
 8003f88:	2600      	movs	r6, #0
 8003f8a:	42a6      	cmp	r6, r4
 8003f8c:	d105      	bne.n	8003f9a <__libc_init_array+0x2e>
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f94:	4798      	blx	r3
 8003f96:	3601      	adds	r6, #1
 8003f98:	e7ee      	b.n	8003f78 <__libc_init_array+0xc>
 8003f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f9e:	4798      	blx	r3
 8003fa0:	3601      	adds	r6, #1
 8003fa2:	e7f2      	b.n	8003f8a <__libc_init_array+0x1e>
 8003fa4:	08003fe8 	.word	0x08003fe8
 8003fa8:	08003fe8 	.word	0x08003fe8
 8003fac:	08003fe8 	.word	0x08003fe8
 8003fb0:	08003fec 	.word	0x08003fec

08003fb4 <__retarget_lock_acquire_recursive>:
 8003fb4:	4770      	bx	lr

08003fb6 <__retarget_lock_release_recursive>:
 8003fb6:	4770      	bx	lr

08003fb8 <_init>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	bf00      	nop
 8003fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fbe:	bc08      	pop	{r3}
 8003fc0:	469e      	mov	lr, r3
 8003fc2:	4770      	bx	lr

08003fc4 <_fini>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr
